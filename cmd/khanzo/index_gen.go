package main

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *MemOnlyIndex) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Root":
			z.Root, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Root")
				return
			}
		case "Segments":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Segments")
				return
			}
			if z.Segments == nil {
				z.Segments = make(map[string]*Segment, zb0002)
			} else if len(z.Segments) > 0 {
				for key := range z.Segments {
					delete(z.Segments, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 *Segment
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Segments")
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Segments", za0001)
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(Segment)
					}
					err = za0002.DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Segments", za0001)
						return
					}
				}
				z.Segments[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MemOnlyIndex) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Root"
	err = en.Append(0x82, 0xa4, 0x52, 0x6f, 0x6f, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Root)
	if err != nil {
		err = msgp.WrapError(err, "Root")
		return
	}
	// write "Segments"
	err = en.Append(0xa8, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Segments)))
	if err != nil {
		err = msgp.WrapError(err, "Segments")
		return
	}
	for za0001, za0002 := range z.Segments {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Segments")
			return
		}
		if za0002 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = za0002.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Segments", za0001)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MemOnlyIndex) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Root"
	o = append(o, 0x82, 0xa4, 0x52, 0x6f, 0x6f, 0x74)
	o = msgp.AppendString(o, z.Root)
	// string "Segments"
	o = append(o, 0xa8, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Segments)))
	for za0001, za0002 := range z.Segments {
		o = msgp.AppendString(o, za0001)
		if za0002 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0002.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Segments", za0001)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MemOnlyIndex) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Root":
			z.Root, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Root")
				return
			}
		case "Segments":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Segments")
				return
			}
			if z.Segments == nil {
				z.Segments = make(map[string]*Segment, zb0002)
			} else if len(z.Segments) > 0 {
				for key := range z.Segments {
					delete(z.Segments, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 *Segment
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Segments")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(Segment)
					}
					bts, err = za0002.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Segments", za0001)
						return
					}
				}
				z.Segments[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MemOnlyIndex) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Root) + 9 + msgp.MapHeaderSize
	if z.Segments != nil {
		for za0001, za0002 := range z.Segments {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001)
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += za0002.Msgsize()
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Segment) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Postings":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Postings")
				return
			}
			if z.Postings == nil {
				z.Postings = make(map[string]map[string][]int32, zb0002)
			} else if len(z.Postings) > 0 {
				for key := range z.Postings {
					delete(z.Postings, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 map[string][]int32
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Postings")
					return
				}
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Postings", za0001)
					return
				}
				if za0002 == nil {
					za0002 = make(map[string][]int32, zb0003)
				} else if len(za0002) > 0 {
					for key := range za0002 {
						delete(za0002, key)
					}
				}
				for zb0003 > 0 {
					zb0003--
					var za0003 string
					var za0004 []int32
					za0003, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Postings", za0001)
						return
					}
					var zb0004 uint32
					zb0004, err = dc.ReadArrayHeader()
					if err != nil {
						err = msgp.WrapError(err, "Postings", za0001, za0003)
						return
					}
					if cap(za0004) >= int(zb0004) {
						za0004 = (za0004)[:zb0004]
					} else {
						za0004 = make([]int32, zb0004)
					}
					for za0005 := range za0004 {
						za0004[za0005], err = dc.ReadInt32()
						if err != nil {
							err = msgp.WrapError(err, "Postings", za0001, za0003, za0005)
							return
						}
					}
					za0002[za0003] = za0004
				}
				z.Postings[za0001] = za0002
			}
		case "Offset":
			z.Offset, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Offset")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Segment) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Postings"
	err = en.Append(0x82, 0xa8, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Postings)))
	if err != nil {
		err = msgp.WrapError(err, "Postings")
		return
	}
	for za0001, za0002 := range z.Postings {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Postings")
			return
		}
		err = en.WriteMapHeader(uint32(len(za0002)))
		if err != nil {
			err = msgp.WrapError(err, "Postings", za0001)
			return
		}
		for za0003, za0004 := range za0002 {
			err = en.WriteString(za0003)
			if err != nil {
				err = msgp.WrapError(err, "Postings", za0001)
				return
			}
			err = en.WriteArrayHeader(uint32(len(za0004)))
			if err != nil {
				err = msgp.WrapError(err, "Postings", za0001, za0003)
				return
			}
			for za0005 := range za0004 {
				err = en.WriteInt32(za0004[za0005])
				if err != nil {
					err = msgp.WrapError(err, "Postings", za0001, za0003, za0005)
					return
				}
			}
		}
	}
	// write "Offset"
	err = en.Append(0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Offset)
	if err != nil {
		err = msgp.WrapError(err, "Offset")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Segment) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Postings"
	o = append(o, 0x82, 0xa8, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Postings)))
	for za0001, za0002 := range z.Postings {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendMapHeader(o, uint32(len(za0002)))
		for za0003, za0004 := range za0002 {
			o = msgp.AppendString(o, za0003)
			o = msgp.AppendArrayHeader(o, uint32(len(za0004)))
			for za0005 := range za0004 {
				o = msgp.AppendInt32(o, za0004[za0005])
			}
		}
	}
	// string "Offset"
	o = append(o, 0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	o = msgp.AppendUint32(o, z.Offset)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Segment) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Postings":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Postings")
				return
			}
			if z.Postings == nil {
				z.Postings = make(map[string]map[string][]int32, zb0002)
			} else if len(z.Postings) > 0 {
				for key := range z.Postings {
					delete(z.Postings, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 map[string][]int32
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Postings")
					return
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Postings", za0001)
					return
				}
				if za0002 == nil {
					za0002 = make(map[string][]int32, zb0003)
				} else if len(za0002) > 0 {
					for key := range za0002 {
						delete(za0002, key)
					}
				}
				for zb0003 > 0 {
					var za0003 string
					var za0004 []int32
					zb0003--
					za0003, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Postings", za0001)
						return
					}
					var zb0004 uint32
					zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Postings", za0001, za0003)
						return
					}
					if cap(za0004) >= int(zb0004) {
						za0004 = (za0004)[:zb0004]
					} else {
						za0004 = make([]int32, zb0004)
					}
					for za0005 := range za0004 {
						za0004[za0005], bts, err = msgp.ReadInt32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Postings", za0001, za0003, za0005)
							return
						}
					}
					za0002[za0003] = za0004
				}
				z.Postings[za0001] = za0002
			}
		case "Offset":
			z.Offset, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Offset")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Segment) Msgsize() (s int) {
	s = 1 + 9 + msgp.MapHeaderSize
	if z.Postings != nil {
		for za0001, za0002 := range z.Postings {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.MapHeaderSize
			if za0002 != nil {
				for za0003, za0004 := range za0002 {
					_ = za0004
					s += msgp.StringPrefixSize + len(za0003) + msgp.ArrayHeaderSize + (len(za0004) * (msgp.Int32Size))
				}
			}
		}
	}
	s += 7 + msgp.Uint32Size
	return
}
