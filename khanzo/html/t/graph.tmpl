<div style="width:80%;">
  <canvas id="canvas"></canvas>
</div>
<hr>
<div style="width:80%;">
  <canvas id="canvas-uniq"></canvas>
</div>
<hr>
<div style="width:80%;">
  <canvas id="canvas-avg"></canvas>
</div>

<script>

var data = {{ json .Chart.Points }};
let options = {
  responsive: true,
  tooltips: {
    mode: 'index',
    intersect: false,
  },
  hover: {
    mode: 'nearest',
    intersect: true
  },
  scales: {
    xAxes: [{
      display: true,
    }],
    yAxes: [{
      display: true,
    }]
  }  
}

let countConfig = {
  type: 'line',
  data: {
    labels: [],
    __labels: {},
    datasets: [],
    __datasets: {}
  },
  options
}

let countUniqueConfig = {
  type: 'line',
  data: {
    labels: [],
    __labels: {},
    datasets: [],
    __datasets: {}

  },
  options
}

let countAvgConfig = {
  type: 'line',
  data: {
    labels: [],
    __labels: {},
    datasets: [],
    __datasets: {}
  },
  options  
}

var dateOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
var hashCode = function(s) {
  var h = 0, l = s.length, i = 0;
  if ( l > 0 )
    while (i < l)
      h = (h << 5) - h + s.charCodeAt(i++) | 0;
  return h;
};

function stringToColour(input) {
  return randomColor({
    luminosity: 'light',
    hue: 'monochrome',
    seed: hashCode(input),
    format: 'rgba',
    alpha: 0.5 
  });
}

var add = function(where,bucket_ns, count, k, orig) {
  let label = new Date(bucket_ns / 1000000).toLocaleDateString("en-GB")
  let l = where.__labels[bucket_ns]
  if (!l) {
    where.labels.push(label)
    where.__labels[bucket_ns] = true
  }
  
  s = where.__datasets[k]
  if (!s) {
    s = {
      label: k,
      data: [],
      backgroundColor: stringToColour(orig),
    }
    where.datasets.push(s)
    where.__datasets[k] = s
  }
  s.data.push(count)

}

let thresh = 1;
let topFilter = {}
{
  let topKeys = {}
  for (let d of data) {
    topKeys[d.event_type] = (topKeys[d.event_type]  || 0) + d.count_unique
  }




  let topSorted = Object.keys(topKeys)
  topSorted.sort((a,b) => topKeys[b] - topKeys[a])

  let j = 0
  for (let x of topSorted) {
    topFilter[x] = true
    j++
    if (j >= thresh)
      break;
  }
}


for (let d of data) {
  if (!topFilter[d.event_type]) continue;

  add(countConfig.data, d.bucket_ns, d.count, d.event_type, d.event_type)
  add(countUniqueConfig.data, d.bucket_ns, d.count_unique, d.event_type + '_uniq', d.event_type)
  add(countAvgConfig.data, d.bucket_ns, d.count / d.count_unique, d.event_type + '_avg', d.event_type)
}


window.countConfig = new Chart(document.getElementById('canvas').getContext('2d'), countConfig);
window.countUniqConfig = new Chart(document.getElementById('canvas-uniq').getContext('2d'), countUniqueConfig);
window.countAvgConfig = new Chart(document.getElementById('canvas-avg').getContext('2d'), countAvgConfig);

</script>