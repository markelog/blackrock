// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spec.proto

package blackrock_io

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	go_query_dsl "github.com/rekki/go-query/util/go_query_dsl"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type KV struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KV) Reset()         { *m = KV{} }
func (m *KV) String() string { return proto.CompactTextString(m) }
func (*KV) ProtoMessage()    {}
func (*KV) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{0}
}
func (m *KV) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KV.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KV.Merge(m, src)
}
func (m *KV) XXX_Size() int {
	return m.Size()
}
func (m *KV) XXX_DiscardUnknown() {
	xxx_messageInfo_KV.DiscardUnknown(m)
}

var xxx_messageInfo_KV proto.InternalMessageInfo

func (m *KV) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KV) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type KF struct {
	Key   string  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KF) Reset()         { *m = KF{} }
func (m *KF) String() string { return proto.CompactTextString(m) }
func (*KF) ProtoMessage()    {}
func (*KF) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{1}
}
func (m *KF) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KF.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KF.Merge(m, src)
}
func (m *KF) XXX_Size() int {
	return m.Size()
}
func (m *KF) XXX_DiscardUnknown() {
	xxx_messageInfo_KF.DiscardUnknown(m)
}

var xxx_messageInfo_KF proto.InternalMessageInfo

func (m *KF) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KF) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Metadata struct {
	Search      []KV              `protobuf:"bytes,1,rep,name=search,proto3" json:"search"`
	Count       []KV              `protobuf:"bytes,2,rep,name=count,proto3" json:"count"`
	Properties  []KV              `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties"`
	Numeric     []KF              `protobuf:"bytes,13,rep,name=numeric,proto3" json:"numeric"`
	CreatedAtNs int64             `protobuf:"varint,5,opt,name=created_at_ns,json=createdAtNs,proto3" json:"created_at_ns,omitempty"`
	EventType   string            `protobuf:"bytes,7,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	ForeignId   string            `protobuf:"bytes,9,opt,name=foreign_id,json=foreignId,proto3" json:"foreign_id,omitempty"`
	ForeignType string            `protobuf:"bytes,10,opt,name=foreign_type,json=foreignType,proto3" json:"foreign_type,omitempty"`
	Track       map[string]uint32 `protobuf:"bytes,11,rep,name=track,proto3" json:"track,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Id          uint64            `protobuf:"fixed64,12,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{2}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetSearch() []KV {
	if m != nil {
		return m.Search
	}
	return nil
}

func (m *Metadata) GetCount() []KV {
	if m != nil {
		return m.Count
	}
	return nil
}

func (m *Metadata) GetProperties() []KV {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Metadata) GetNumeric() []KF {
	if m != nil {
		return m.Numeric
	}
	return nil
}

func (m *Metadata) GetCreatedAtNs() int64 {
	if m != nil {
		return m.CreatedAtNs
	}
	return 0
}

func (m *Metadata) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *Metadata) GetForeignId() string {
	if m != nil {
		return m.ForeignId
	}
	return ""
}

func (m *Metadata) GetForeignType() string {
	if m != nil {
		return m.ForeignType
	}
	return ""
}

func (m *Metadata) GetTrack() map[string]uint32 {
	if m != nil {
		return m.Track
	}
	return nil
}

func (m *Metadata) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SearchableMetadata struct {
	Search      []KV              `protobuf:"bytes,1,rep,name=search,proto3" json:"search"`
	EventType   string            `protobuf:"bytes,7,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	ForeignId   string            `protobuf:"bytes,9,opt,name=foreign_id,json=foreignId,proto3" json:"foreign_id,omitempty"`
	ForeignType string            `protobuf:"bytes,10,opt,name=foreign_type,json=foreignType,proto3" json:"foreign_type,omitempty"`
	Track       map[string]uint32 `protobuf:"bytes,11,rep,name=track,proto3" json:"track,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *SearchableMetadata) Reset()         { *m = SearchableMetadata{} }
func (m *SearchableMetadata) String() string { return proto.CompactTextString(m) }
func (*SearchableMetadata) ProtoMessage()    {}
func (*SearchableMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{3}
}
func (m *SearchableMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchableMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchableMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchableMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchableMetadata.Merge(m, src)
}
func (m *SearchableMetadata) XXX_Size() int {
	return m.Size()
}
func (m *SearchableMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchableMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_SearchableMetadata proto.InternalMessageInfo

func (m *SearchableMetadata) GetSearch() []KV {
	if m != nil {
		return m.Search
	}
	return nil
}

func (m *SearchableMetadata) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *SearchableMetadata) GetForeignId() string {
	if m != nil {
		return m.ForeignId
	}
	return ""
}

func (m *SearchableMetadata) GetForeignType() string {
	if m != nil {
		return m.ForeignType
	}
	return ""
}

func (m *SearchableMetadata) GetTrack() map[string]uint32 {
	if m != nil {
		return m.Track
	}
	return nil
}

type BasicMetadata struct {
	CreatedAtNs int64  `protobuf:"varint,5,opt,name=created_at_ns,json=createdAtNs,proto3" json:"created_at_ns,omitempty"`
	EventType   string `protobuf:"bytes,7,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	ForeignId   string `protobuf:"bytes,9,opt,name=foreign_id,json=foreignId,proto3" json:"foreign_id,omitempty"`
	ForeignType string `protobuf:"bytes,10,opt,name=foreign_type,json=foreignType,proto3" json:"foreign_type,omitempty"`
}

func (m *BasicMetadata) Reset()         { *m = BasicMetadata{} }
func (m *BasicMetadata) String() string { return proto.CompactTextString(m) }
func (*BasicMetadata) ProtoMessage()    {}
func (*BasicMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{4}
}
func (m *BasicMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasicMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BasicMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BasicMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicMetadata.Merge(m, src)
}
func (m *BasicMetadata) XXX_Size() int {
	return m.Size()
}
func (m *BasicMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_BasicMetadata proto.InternalMessageInfo

func (m *BasicMetadata) GetCreatedAtNs() int64 {
	if m != nil {
		return m.CreatedAtNs
	}
	return 0
}

func (m *BasicMetadata) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *BasicMetadata) GetForeignId() string {
	if m != nil {
		return m.ForeignId
	}
	return ""
}

func (m *BasicMetadata) GetForeignType() string {
	if m != nil {
		return m.ForeignType
	}
	return ""
}

type NumericMetadata struct {
	Numeric     []KF   `protobuf:"bytes,13,rep,name=numeric,proto3" json:"numeric"`
	EventType   string `protobuf:"bytes,7,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	ForeignId   string `protobuf:"bytes,9,opt,name=foreign_id,json=foreignId,proto3" json:"foreign_id,omitempty"`
	ForeignType string `protobuf:"bytes,10,opt,name=foreign_type,json=foreignType,proto3" json:"foreign_type,omitempty"`
}

func (m *NumericMetadata) Reset()         { *m = NumericMetadata{} }
func (m *NumericMetadata) String() string { return proto.CompactTextString(m) }
func (*NumericMetadata) ProtoMessage()    {}
func (*NumericMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{5}
}
func (m *NumericMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NumericMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NumericMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NumericMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumericMetadata.Merge(m, src)
}
func (m *NumericMetadata) XXX_Size() int {
	return m.Size()
}
func (m *NumericMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_NumericMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_NumericMetadata proto.InternalMessageInfo

func (m *NumericMetadata) GetNumeric() []KF {
	if m != nil {
		return m.Numeric
	}
	return nil
}

func (m *NumericMetadata) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *NumericMetadata) GetForeignId() string {
	if m != nil {
		return m.ForeignId
	}
	return ""
}

func (m *NumericMetadata) GetForeignType() string {
	if m != nil {
		return m.ForeignType
	}
	return ""
}

type CountableMetadata struct {
	Search      []KV   `protobuf:"bytes,1,rep,name=search,proto3" json:"search"`
	Count       []KV   `protobuf:"bytes,2,rep,name=count,proto3" json:"count"`
	CreatedAtNs int64  `protobuf:"varint,5,opt,name=created_at_ns,json=createdAtNs,proto3" json:"created_at_ns,omitempty"`
	EventType   string `protobuf:"bytes,7,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	ForeignId   string `protobuf:"bytes,9,opt,name=foreign_id,json=foreignId,proto3" json:"foreign_id,omitempty"`
	ForeignType string `protobuf:"bytes,10,opt,name=foreign_type,json=foreignType,proto3" json:"foreign_type,omitempty"`
}

func (m *CountableMetadata) Reset()         { *m = CountableMetadata{} }
func (m *CountableMetadata) String() string { return proto.CompactTextString(m) }
func (*CountableMetadata) ProtoMessage()    {}
func (*CountableMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{6}
}
func (m *CountableMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountableMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountableMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountableMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountableMetadata.Merge(m, src)
}
func (m *CountableMetadata) XXX_Size() int {
	return m.Size()
}
func (m *CountableMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CountableMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CountableMetadata proto.InternalMessageInfo

func (m *CountableMetadata) GetSearch() []KV {
	if m != nil {
		return m.Search
	}
	return nil
}

func (m *CountableMetadata) GetCount() []KV {
	if m != nil {
		return m.Count
	}
	return nil
}

func (m *CountableMetadata) GetCreatedAtNs() int64 {
	if m != nil {
		return m.CreatedAtNs
	}
	return 0
}

func (m *CountableMetadata) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *CountableMetadata) GetForeignId() string {
	if m != nil {
		return m.ForeignId
	}
	return ""
}

func (m *CountableMetadata) GetForeignType() string {
	if m != nil {
		return m.ForeignType
	}
	return ""
}

type Hit struct {
	Id       uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Score    float32   `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	Metadata *Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *Hit) Reset()         { *m = Hit{} }
func (m *Hit) String() string { return proto.CompactTextString(m) }
func (*Hit) ProtoMessage()    {}
func (*Hit) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{7}
}
func (m *Hit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hit.Merge(m, src)
}
func (m *Hit) XXX_Size() int {
	return m.Size()
}
func (m *Hit) XXX_DiscardUnknown() {
	xxx_messageInfo_Hit.DiscardUnknown(m)
}

var xxx_messageInfo_Hit proto.InternalMessageInfo

func (m *Hit) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Hit) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Hit) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type SearchQueryRequest struct {
	FromSecond uint32              `protobuf:"varint,1,opt,name=from_second,json=fromSecond,proto3" json:"from_second,omitempty"`
	ToSecond   uint32              `protobuf:"varint,2,opt,name=to_second,json=toSecond,proto3" json:"to_second,omitempty"`
	Query      *go_query_dsl.Query `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Limit      int32               `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *SearchQueryRequest) Reset()         { *m = SearchQueryRequest{} }
func (m *SearchQueryRequest) String() string { return proto.CompactTextString(m) }
func (*SearchQueryRequest) ProtoMessage()    {}
func (*SearchQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{8}
}
func (m *SearchQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchQueryRequest.Merge(m, src)
}
func (m *SearchQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchQueryRequest proto.InternalMessageInfo

func (m *SearchQueryRequest) GetFromSecond() uint32 {
	if m != nil {
		return m.FromSecond
	}
	return 0
}

func (m *SearchQueryRequest) GetToSecond() uint32 {
	if m != nil {
		return m.ToSecond
	}
	return 0
}

func (m *SearchQueryRequest) GetQuery() *go_query_dsl.Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *SearchQueryRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type CountPerKV struct {
	Count map[string]uint32 `protobuf:"bytes,1,rep,name=count,proto3" json:"count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Total uint32            `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Key   string            `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *CountPerKV) Reset()         { *m = CountPerKV{} }
func (m *CountPerKV) String() string { return proto.CompactTextString(m) }
func (*CountPerKV) ProtoMessage()    {}
func (*CountPerKV) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{9}
}
func (m *CountPerKV) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountPerKV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountPerKV.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountPerKV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountPerKV.Merge(m, src)
}
func (m *CountPerKV) XXX_Size() int {
	return m.Size()
}
func (m *CountPerKV) XXX_DiscardUnknown() {
	xxx_messageInfo_CountPerKV.DiscardUnknown(m)
}

var xxx_messageInfo_CountPerKV proto.InternalMessageInfo

func (m *CountPerKV) GetCount() map[string]uint32 {
	if m != nil {
		return m.Count
	}
	return nil
}

func (m *CountPerKV) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *CountPerKV) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type PointPerEventType struct {
	Count       uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	CountUnique uint32 `protobuf:"varint,2,opt,name=count_unique,json=countUnique,proto3" json:"count_unique,omitempty"`
	Bucket      uint32 `protobuf:"varint,3,opt,name=bucket,proto3" json:"bucket,omitempty"`
	EventType   string `protobuf:"bytes,4,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
}

func (m *PointPerEventType) Reset()         { *m = PointPerEventType{} }
func (m *PointPerEventType) String() string { return proto.CompactTextString(m) }
func (*PointPerEventType) ProtoMessage()    {}
func (*PointPerEventType) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{10}
}
func (m *PointPerEventType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PointPerEventType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PointPerEventType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PointPerEventType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PointPerEventType.Merge(m, src)
}
func (m *PointPerEventType) XXX_Size() int {
	return m.Size()
}
func (m *PointPerEventType) XXX_DiscardUnknown() {
	xxx_messageInfo_PointPerEventType.DiscardUnknown(m)
}

var xxx_messageInfo_PointPerEventType proto.InternalMessageInfo

func (m *PointPerEventType) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PointPerEventType) GetCountUnique() uint32 {
	if m != nil {
		return m.CountUnique
	}
	return 0
}

func (m *PointPerEventType) GetBucket() uint32 {
	if m != nil {
		return m.Bucket
	}
	return 0
}

func (m *PointPerEventType) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

type ChartBucketPerTime struct {
	PerType map[string]*PointPerEventType `protobuf:"bytes,1,rep,name=per_type,json=perType,proto3" json:"per_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ChartBucketPerTime) Reset()         { *m = ChartBucketPerTime{} }
func (m *ChartBucketPerTime) String() string { return proto.CompactTextString(m) }
func (*ChartBucketPerTime) ProtoMessage()    {}
func (*ChartBucketPerTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{11}
}
func (m *ChartBucketPerTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChartBucketPerTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChartBucketPerTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChartBucketPerTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartBucketPerTime.Merge(m, src)
}
func (m *ChartBucketPerTime) XXX_Size() int {
	return m.Size()
}
func (m *ChartBucketPerTime) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartBucketPerTime.DiscardUnknown(m)
}

var xxx_messageInfo_ChartBucketPerTime proto.InternalMessageInfo

func (m *ChartBucketPerTime) GetPerType() map[string]*PointPerEventType {
	if m != nil {
		return m.PerType
	}
	return nil
}

type Chart struct {
	Buckets       map[uint32]*ChartBucketPerTime `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TimeStart     uint32                         `protobuf:"varint,2,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	TimeEnd       uint32                         `protobuf:"varint,3,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	TimeBucketSec uint32                         `protobuf:"varint,4,opt,name=time_bucket_sec,json=timeBucketSec,proto3" json:"time_bucket_sec,omitempty"`
}

func (m *Chart) Reset()         { *m = Chart{} }
func (m *Chart) String() string { return proto.CompactTextString(m) }
func (*Chart) ProtoMessage()    {}
func (*Chart) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{12}
}
func (m *Chart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chart.Merge(m, src)
}
func (m *Chart) XXX_Size() int {
	return m.Size()
}
func (m *Chart) XXX_DiscardUnknown() {
	xxx_messageInfo_Chart.DiscardUnknown(m)
}

var xxx_messageInfo_Chart proto.InternalMessageInfo

func (m *Chart) GetBuckets() map[uint32]*ChartBucketPerTime {
	if m != nil {
		return m.Buckets
	}
	return nil
}

func (m *Chart) GetTimeStart() uint32 {
	if m != nil {
		return m.TimeStart
	}
	return 0
}

func (m *Chart) GetTimeEnd() uint32 {
	if m != nil {
		return m.TimeEnd
	}
	return 0
}

func (m *Chart) GetTimeBucketSec() uint32 {
	if m != nil {
		return m.TimeBucketSec
	}
	return 0
}

type AggregateRequest struct {
	Query         *SearchQueryRequest `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Fields        map[string]bool     `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SampleLimit   int32               `protobuf:"varint,3,opt,name=sample_limit,json=sampleLimit,proto3" json:"sample_limit,omitempty"`
	TimeBucketSec uint32              `protobuf:"varint,4,opt,name=time_bucket_sec,json=timeBucketSec,proto3" json:"time_bucket_sec,omitempty"`
}

func (m *AggregateRequest) Reset()         { *m = AggregateRequest{} }
func (m *AggregateRequest) String() string { return proto.CompactTextString(m) }
func (*AggregateRequest) ProtoMessage()    {}
func (*AggregateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{13}
}
func (m *AggregateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregateRequest.Merge(m, src)
}
func (m *AggregateRequest) XXX_Size() int {
	return m.Size()
}
func (m *AggregateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AggregateRequest proto.InternalMessageInfo

func (m *AggregateRequest) GetQuery() *SearchQueryRequest {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *AggregateRequest) GetFields() map[string]bool {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *AggregateRequest) GetSampleLimit() int32 {
	if m != nil {
		return m.SampleLimit
	}
	return 0
}

func (m *AggregateRequest) GetTimeBucketSec() uint32 {
	if m != nil {
		return m.TimeBucketSec
	}
	return 0
}

type Aggregate struct {
	Search    map[string]*CountPerKV `protobuf:"bytes,1,rep,name=search,proto3" json:"search,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Count     map[string]*CountPerKV `protobuf:"bytes,2,rep,name=count,proto3" json:"count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ForeignId map[string]*CountPerKV `protobuf:"bytes,3,rep,name=foreign_id,json=foreignId,proto3" json:"foreign_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EventType map[string]*CountPerKV `protobuf:"bytes,4,rep,name=event_type,json=eventType,proto3" json:"event_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Possible  map[string]uint32      `protobuf:"bytes,5,rep,name=possible,proto3" json:"possible,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Total     uint32                 `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
	Sample    []*Hit                 `protobuf:"bytes,7,rep,name=sample,proto3" json:"sample,omitempty"`
	Chart     *Chart                 `protobuf:"bytes,8,opt,name=chart,proto3" json:"chart,omitempty"`
}

func (m *Aggregate) Reset()         { *m = Aggregate{} }
func (m *Aggregate) String() string { return proto.CompactTextString(m) }
func (*Aggregate) ProtoMessage()    {}
func (*Aggregate) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{14}
}
func (m *Aggregate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Aggregate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Aggregate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Aggregate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Aggregate.Merge(m, src)
}
func (m *Aggregate) XXX_Size() int {
	return m.Size()
}
func (m *Aggregate) XXX_DiscardUnknown() {
	xxx_messageInfo_Aggregate.DiscardUnknown(m)
}

var xxx_messageInfo_Aggregate proto.InternalMessageInfo

func (m *Aggregate) GetSearch() map[string]*CountPerKV {
	if m != nil {
		return m.Search
	}
	return nil
}

func (m *Aggregate) GetCount() map[string]*CountPerKV {
	if m != nil {
		return m.Count
	}
	return nil
}

func (m *Aggregate) GetForeignId() map[string]*CountPerKV {
	if m != nil {
		return m.ForeignId
	}
	return nil
}

func (m *Aggregate) GetEventType() map[string]*CountPerKV {
	if m != nil {
		return m.EventType
	}
	return nil
}

func (m *Aggregate) GetPossible() map[string]uint32 {
	if m != nil {
		return m.Possible
	}
	return nil
}

func (m *Aggregate) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Aggregate) GetSample() []*Hit {
	if m != nil {
		return m.Sample
	}
	return nil
}

func (m *Aggregate) GetChart() *Chart {
	if m != nil {
		return m.Chart
	}
	return nil
}

type SearchQueryResponse struct {
	Hits  []*Hit `protobuf:"bytes,1,rep,name=hits,proto3" json:"hits,omitempty"`
	Total uint64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *SearchQueryResponse) Reset()         { *m = SearchQueryResponse{} }
func (m *SearchQueryResponse) String() string { return proto.CompactTextString(m) }
func (*SearchQueryResponse) ProtoMessage()    {}
func (*SearchQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{15}
}
func (m *SearchQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchQueryResponse.Merge(m, src)
}
func (m *SearchQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *SearchQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchQueryResponse proto.InternalMessageInfo

func (m *SearchQueryResponse) GetHits() []*Hit {
	if m != nil {
		return m.Hits
	}
	return nil
}

func (m *SearchQueryResponse) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type Envelope struct {
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Payload  []byte    `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Envelope) Reset()         { *m = Envelope{} }
func (m *Envelope) String() string { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()    {}
func (*Envelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{16}
}
func (m *Envelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Envelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Envelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Envelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Envelope.Merge(m, src)
}
func (m *Envelope) XXX_Size() int {
	return m.Size()
}
func (m *Envelope) XXX_DiscardUnknown() {
	xxx_messageInfo_Envelope.DiscardUnknown(m)
}

var xxx_messageInfo_Envelope proto.InternalMessageInfo

func (m *Envelope) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Envelope) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Success struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *Success) Reset()         { *m = Success{} }
func (m *Success) String() string { return proto.CompactTextString(m) }
func (*Success) ProtoMessage()    {}
func (*Success) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{17}
}
func (m *Success) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Success) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Success.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Success) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Success.Merge(m, src)
}
func (m *Success) XXX_Size() int {
	return m.Size()
}
func (m *Success) XXX_DiscardUnknown() {
	xxx_messageInfo_Success.DiscardUnknown(m)
}

var xxx_messageInfo_Success proto.InternalMessageInfo

func (m *Success) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type HealthRequest struct {
}

func (m *HealthRequest) Reset()         { *m = HealthRequest{} }
func (m *HealthRequest) String() string { return proto.CompactTextString(m) }
func (*HealthRequest) ProtoMessage()    {}
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{18}
}
func (m *HealthRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthRequest.Merge(m, src)
}
func (m *HealthRequest) XXX_Size() int {
	return m.Size()
}
func (m *HealthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*KV)(nil), "blackrock.io.KV")
	golang_proto.RegisterType((*KV)(nil), "blackrock.io.KV")
	proto.RegisterType((*KF)(nil), "blackrock.io.KF")
	golang_proto.RegisterType((*KF)(nil), "blackrock.io.KF")
	proto.RegisterType((*Metadata)(nil), "blackrock.io.Metadata")
	golang_proto.RegisterType((*Metadata)(nil), "blackrock.io.Metadata")
	proto.RegisterMapType((map[string]uint32)(nil), "blackrock.io.Metadata.TrackEntry")
	golang_proto.RegisterMapType((map[string]uint32)(nil), "blackrock.io.Metadata.TrackEntry")
	proto.RegisterType((*SearchableMetadata)(nil), "blackrock.io.SearchableMetadata")
	golang_proto.RegisterType((*SearchableMetadata)(nil), "blackrock.io.SearchableMetadata")
	proto.RegisterMapType((map[string]uint32)(nil), "blackrock.io.SearchableMetadata.TrackEntry")
	golang_proto.RegisterMapType((map[string]uint32)(nil), "blackrock.io.SearchableMetadata.TrackEntry")
	proto.RegisterType((*BasicMetadata)(nil), "blackrock.io.BasicMetadata")
	golang_proto.RegisterType((*BasicMetadata)(nil), "blackrock.io.BasicMetadata")
	proto.RegisterType((*NumericMetadata)(nil), "blackrock.io.NumericMetadata")
	golang_proto.RegisterType((*NumericMetadata)(nil), "blackrock.io.NumericMetadata")
	proto.RegisterType((*CountableMetadata)(nil), "blackrock.io.CountableMetadata")
	golang_proto.RegisterType((*CountableMetadata)(nil), "blackrock.io.CountableMetadata")
	proto.RegisterType((*Hit)(nil), "blackrock.io.Hit")
	golang_proto.RegisterType((*Hit)(nil), "blackrock.io.Hit")
	proto.RegisterType((*SearchQueryRequest)(nil), "blackrock.io.SearchQueryRequest")
	golang_proto.RegisterType((*SearchQueryRequest)(nil), "blackrock.io.SearchQueryRequest")
	proto.RegisterType((*CountPerKV)(nil), "blackrock.io.CountPerKV")
	golang_proto.RegisterType((*CountPerKV)(nil), "blackrock.io.CountPerKV")
	proto.RegisterMapType((map[string]uint32)(nil), "blackrock.io.CountPerKV.CountEntry")
	golang_proto.RegisterMapType((map[string]uint32)(nil), "blackrock.io.CountPerKV.CountEntry")
	proto.RegisterType((*PointPerEventType)(nil), "blackrock.io.PointPerEventType")
	golang_proto.RegisterType((*PointPerEventType)(nil), "blackrock.io.PointPerEventType")
	proto.RegisterType((*ChartBucketPerTime)(nil), "blackrock.io.ChartBucketPerTime")
	golang_proto.RegisterType((*ChartBucketPerTime)(nil), "blackrock.io.ChartBucketPerTime")
	proto.RegisterMapType((map[string]*PointPerEventType)(nil), "blackrock.io.ChartBucketPerTime.PerTypeEntry")
	golang_proto.RegisterMapType((map[string]*PointPerEventType)(nil), "blackrock.io.ChartBucketPerTime.PerTypeEntry")
	proto.RegisterType((*Chart)(nil), "blackrock.io.Chart")
	golang_proto.RegisterType((*Chart)(nil), "blackrock.io.Chart")
	proto.RegisterMapType((map[uint32]*ChartBucketPerTime)(nil), "blackrock.io.Chart.BucketsEntry")
	golang_proto.RegisterMapType((map[uint32]*ChartBucketPerTime)(nil), "blackrock.io.Chart.BucketsEntry")
	proto.RegisterType((*AggregateRequest)(nil), "blackrock.io.AggregateRequest")
	golang_proto.RegisterType((*AggregateRequest)(nil), "blackrock.io.AggregateRequest")
	proto.RegisterMapType((map[string]bool)(nil), "blackrock.io.AggregateRequest.FieldsEntry")
	golang_proto.RegisterMapType((map[string]bool)(nil), "blackrock.io.AggregateRequest.FieldsEntry")
	proto.RegisterType((*Aggregate)(nil), "blackrock.io.Aggregate")
	golang_proto.RegisterType((*Aggregate)(nil), "blackrock.io.Aggregate")
	proto.RegisterMapType((map[string]*CountPerKV)(nil), "blackrock.io.Aggregate.CountEntry")
	golang_proto.RegisterMapType((map[string]*CountPerKV)(nil), "blackrock.io.Aggregate.CountEntry")
	proto.RegisterMapType((map[string]*CountPerKV)(nil), "blackrock.io.Aggregate.EventTypeEntry")
	golang_proto.RegisterMapType((map[string]*CountPerKV)(nil), "blackrock.io.Aggregate.EventTypeEntry")
	proto.RegisterMapType((map[string]*CountPerKV)(nil), "blackrock.io.Aggregate.ForeignIdEntry")
	golang_proto.RegisterMapType((map[string]*CountPerKV)(nil), "blackrock.io.Aggregate.ForeignIdEntry")
	proto.RegisterMapType((map[string]uint32)(nil), "blackrock.io.Aggregate.PossibleEntry")
	golang_proto.RegisterMapType((map[string]uint32)(nil), "blackrock.io.Aggregate.PossibleEntry")
	proto.RegisterMapType((map[string]*CountPerKV)(nil), "blackrock.io.Aggregate.SearchEntry")
	golang_proto.RegisterMapType((map[string]*CountPerKV)(nil), "blackrock.io.Aggregate.SearchEntry")
	proto.RegisterType((*SearchQueryResponse)(nil), "blackrock.io.SearchQueryResponse")
	golang_proto.RegisterType((*SearchQueryResponse)(nil), "blackrock.io.SearchQueryResponse")
	proto.RegisterType((*Envelope)(nil), "blackrock.io.Envelope")
	golang_proto.RegisterType((*Envelope)(nil), "blackrock.io.Envelope")
	proto.RegisterType((*Success)(nil), "blackrock.io.Success")
	golang_proto.RegisterType((*Success)(nil), "blackrock.io.Success")
	proto.RegisterType((*HealthRequest)(nil), "blackrock.io.HealthRequest")
	golang_proto.RegisterType((*HealthRequest)(nil), "blackrock.io.HealthRequest")
}

func init() { proto.RegisterFile("spec.proto", fileDescriptor_423806180556987f) }
func init() { golang_proto.RegisterFile("spec.proto", fileDescriptor_423806180556987f) }

var fileDescriptor_423806180556987f = []byte{
	// 1443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcb, 0x6f, 0x13, 0x47,
	0x18, 0xcf, 0xda, 0xf1, 0xeb, 0xb3, 0x4d, 0xc8, 0x40, 0x61, 0x31, 0xd4, 0x71, 0x16, 0x81, 0x4c,
	0x0a, 0x6b, 0x9a, 0x0a, 0x0a, 0xe1, 0x94, 0x20, 0x47, 0xa9, 0x68, 0x51, 0xba, 0xa6, 0x51, 0x25,
	0x2a, 0x59, 0xeb, 0xf5, 0xc4, 0x5e, 0x79, 0xbd, 0xb3, 0xd9, 0x9d, 0x8d, 0xe4, 0x6b, 0xdb, 0x3f,
	0x00, 0x89, 0x1e, 0x7a, 0x2d, 0xb7, 0xde, 0x50, 0xaf, 0xbd, 0xf4, 0xc8, 0x11, 0xa9, 0xaa, 0xd4,
	0x53, 0x85, 0x48, 0x0f, 0xfd, 0x33, 0xaa, 0x9d, 0x99, 0xb5, 0x77, 0xfd, 0x48, 0x08, 0x0d, 0x15,
	0x27, 0x76, 0xbe, 0xf9, 0x7d, 0x8f, 0xf9, 0x7d, 0x2f, 0x13, 0x00, 0xcf, 0xc1, 0x86, 0xea, 0xb8,
	0x84, 0x12, 0x54, 0x68, 0x59, 0xba, 0xd1, 0x73, 0x89, 0xd1, 0x53, 0x4d, 0x52, 0xba, 0xd1, 0x31,
	0x69, 0xd7, 0x6f, 0xa9, 0x06, 0xe9, 0xd7, 0x3a, 0xa4, 0x43, 0x6a, 0x0c, 0xd4, 0xf2, 0x77, 0xd9,
	0x89, 0x1d, 0xd8, 0x17, 0x57, 0x2e, 0xdd, 0x8a, 0xc0, 0x5d, 0xdc, 0xeb, 0x99, 0xb5, 0x0e, 0xb9,
	0xb1, 0xe7, 0x63, 0x77, 0x50, 0xf3, 0xa9, 0x69, 0xd5, 0x3a, 0xa4, 0xc9, 0x4e, 0xcd, 0xb6, 0x67,
	0xd5, 0xda, 0x9e, 0x25, 0xd4, 0x2e, 0x75, 0x08, 0xe9, 0x58, 0xb8, 0xa6, 0x3b, 0x66, 0x4d, 0xb7,
	0x6d, 0x42, 0x75, 0x6a, 0x12, 0xdb, 0xe3, 0xb7, 0xca, 0x75, 0x48, 0x3c, 0xd8, 0x41, 0xa7, 0x21,
	0xd9, 0xc3, 0x03, 0x59, 0xaa, 0x48, 0xd5, 0x9c, 0x16, 0x7c, 0xa2, 0xb3, 0x90, 0xda, 0xd7, 0x2d,
	0x1f, 0xcb, 0x09, 0x26, 0xe3, 0x07, 0x86, 0xde, 0x3c, 0x0a, 0x2d, 0x85, 0xe8, 0x7f, 0x92, 0x90,
	0xfd, 0x02, 0x53, 0xbd, 0xad, 0x53, 0x1d, 0xa9, 0x90, 0xf6, 0xb0, 0xee, 0x1a, 0x5d, 0x59, 0xaa,
	0x24, 0xab, 0xf9, 0xd5, 0xd3, 0x6a, 0x94, 0x0b, 0xf5, 0xc1, 0xce, 0xc6, 0xfc, 0x8b, 0xbf, 0x96,
	0xe6, 0x34, 0x81, 0x42, 0xd7, 0x21, 0x65, 0x10, 0xdf, 0xa6, 0x72, 0xe2, 0x50, 0x38, 0x07, 0xa1,
	0xdb, 0x00, 0x8e, 0x4b, 0x1c, 0xec, 0x52, 0x13, 0x7b, 0x72, 0xf2, 0x50, 0x95, 0x08, 0x12, 0xdd,
	0x84, 0x8c, 0xed, 0xf7, 0xb1, 0x6b, 0x1a, 0x72, 0x71, 0xaa, 0xd2, 0xa6, 0x50, 0x0a, 0x61, 0x48,
	0x81, 0xa2, 0xe1, 0x62, 0x9d, 0xe2, 0x76, 0x53, 0xa7, 0x4d, 0xdb, 0x93, 0x53, 0x15, 0xa9, 0x9a,
	0xd4, 0xf2, 0x42, 0xb8, 0x4e, 0x1f, 0x7a, 0xe8, 0x43, 0x00, 0xbc, 0x8f, 0x6d, 0xda, 0xa4, 0x03,
	0x07, 0xcb, 0x19, 0xc6, 0x53, 0x8e, 0x49, 0x1e, 0x0d, 0x1c, 0x1c, 0x5c, 0xef, 0x12, 0x17, 0x9b,
	0x1d, 0xbb, 0x69, 0xb6, 0xe5, 0x1c, 0xbf, 0x16, 0x92, 0xcf, 0xda, 0x68, 0x19, 0x0a, 0xe1, 0x35,
	0xd3, 0x07, 0x06, 0xc8, 0x0b, 0x19, 0xb3, 0xf0, 0x29, 0xa4, 0xa8, 0xab, 0x1b, 0x3d, 0x39, 0xcf,
	0x82, 0x5e, 0x8e, 0x07, 0x1d, 0x72, 0xae, 0x3e, 0x0a, 0x30, 0x75, 0x9b, 0xba, 0x03, 0x8d, 0xe3,
	0xd1, 0x29, 0x48, 0x98, 0x6d, 0xb9, 0x50, 0x91, 0xaa, 0x69, 0x2d, 0x61, 0xb6, 0x4b, 0x77, 0x00,
	0x46, 0xa0, 0xa3, 0x12, 0x5b, 0x14, 0x89, 0x5d, 0x4b, 0xdc, 0x91, 0xd6, 0x0a, 0x2f, 0x7f, 0x5a,
	0x9a, 0x7b, 0xf2, 0x6c, 0x69, 0xee, 0xc7, 0x67, 0x4b, 0x73, 0xca, 0xf3, 0x04, 0xa0, 0x06, 0x4b,
	0x9c, 0xde, 0xb2, 0xf0, 0x5b, 0x27, 0xfd, 0x9d, 0x13, 0xb7, 0x1e, 0x27, 0xee, 0xa3, 0x78, 0x3c,
	0x93, 0x2f, 0x98, 0xa4, 0xf0, 0xc4, 0x28, 0x7b, 0x26, 0x41, 0x71, 0x43, 0xf7, 0x4c, 0x63, 0xc8,
	0xd6, 0xfb, 0x50, 0x5a, 0x63, 0x41, 0xfe, 0x22, 0xc1, 0xc2, 0x43, 0x5e, 0xf9, 0xc3, 0x30, 0x8f,
	0xdf, 0x33, 0xff, 0x73, 0xd0, 0xdf, 0x27, 0x60, 0xf1, 0x7e, 0x30, 0x16, 0xfe, 0x53, 0x2d, 0x1e,
	0x6f, 0x00, 0xbd, 0x87, 0xb9, 0x6b, 0x42, 0x72, 0xcb, 0xa4, 0xa2, 0xe5, 0x83, 0x02, 0x9d, 0x0f,
	0x5a, 0x3e, 0xa8, 0x4f, 0xcf, 0x20, 0x2e, 0xaf, 0xcf, 0x84, 0xc6, 0x0f, 0x68, 0x15, 0xb2, 0x7d,
	0xc1, 0x94, 0x9c, 0xac, 0x48, 0xd5, 0xfc, 0xea, 0xb9, 0xe9, 0x43, 0x45, 0x1b, 0xe2, 0x94, 0xa7,
	0x52, 0xd8, 0xf4, 0x5f, 0x06, 0x7b, 0x47, 0xc3, 0x7b, 0x3e, 0xf6, 0x28, 0x5a, 0x82, 0xfc, 0xae,
	0x4b, 0xfa, 0x4d, 0x0f, 0x1b, 0xc4, 0xe6, 0x9e, 0x8b, 0x1a, 0x04, 0xa2, 0x06, 0x93, 0xa0, 0x8b,
	0x90, 0xa3, 0x24, 0xbc, 0xe6, 0x5d, 0x92, 0xa5, 0x44, 0x5c, 0x5e, 0x83, 0x14, 0xdb, 0x62, 0x22,
	0x8a, 0x33, 0x6a, 0x87, 0xa8, 0x4c, 0xa0, 0x06, 0x2b, 0x8d, 0x3b, 0xe2, 0x88, 0xe0, 0x25, 0x96,
	0xd9, 0x37, 0xa9, 0x3c, 0x5f, 0x91, 0xaa, 0x29, 0x8d, 0x1f, 0x94, 0x9f, 0x25, 0x00, 0x96, 0xfd,
	0x6d, 0xec, 0x3e, 0xd8, 0x41, 0x77, 0xc3, 0x34, 0xf2, 0xac, 0x5f, 0x8e, 0xbf, 0x6a, 0x04, 0xe4,
	0x9f, 0xa2, 0xd3, 0x79, 0x4e, 0xcf, 0x42, 0x8a, 0x12, 0xaa, 0x5b, 0x61, 0x27, 0xb3, 0x43, 0xd8,
	0xf1, 0xc9, 0x61, 0xc7, 0x07, 0x13, 0x61, 0xa4, 0x7c, 0x9c, 0x89, 0xa0, 0x7c, 0x27, 0xc1, 0xe2,
	0x36, 0x31, 0x59, 0x08, 0xf5, 0x61, 0x21, 0x9c, 0x1d, 0x85, 0xcc, 0xf0, 0x3c, 0x9a, 0x65, 0x28,
	0xb0, 0x8f, 0xa6, 0x6f, 0x9b, 0x7b, 0x43, 0x63, 0x79, 0x26, 0xfb, 0x8a, 0x89, 0xd0, 0x39, 0x48,
	0xb7, 0x7c, 0xa3, 0x87, 0x29, 0x8b, 0xae, 0xa8, 0x89, 0xd3, 0x58, 0xe1, 0xcd, 0x8f, 0x15, 0x9e,
	0xf2, 0xab, 0x04, 0xe8, 0x7e, 0x57, 0x77, 0xe9, 0x06, 0x83, 0x6f, 0x63, 0xf7, 0x91, 0xd9, 0xc7,
	0x68, 0x0b, 0xb2, 0x0e, 0x76, 0xb9, 0x0e, 0x27, 0xef, 0xc6, 0x18, 0x79, 0x13, 0x3a, 0x6a, 0xf0,
	0xef, 0xc0, 0xc1, 0x9c, 0xc6, 0x8c, 0xc3, 0x4f, 0xa5, 0xc7, 0x50, 0x88, 0x5e, 0x4c, 0xa1, 0xe8,
	0x56, 0x94, 0xa2, 0xfc, 0xea, 0x52, 0xdc, 0xd1, 0x04, 0x45, 0x31, 0x0e, 0x13, 0x90, 0x62, 0x91,
	0xa0, 0x35, 0xc8, 0xf0, 0x07, 0x7b, 0x22, 0xde, 0xca, 0x94, 0x78, 0x55, 0x1e, 0xb0, 0x27, 0x42,
	0x14, 0x0a, 0x01, 0x45, 0xd4, 0xec, 0xe3, 0xa6, 0x47, 0x75, 0x97, 0x0a, 0x6e, 0x73, 0x81, 0xa4,
	0x11, 0x08, 0xd0, 0x05, 0xc8, 0xb2, 0x6b, 0x6c, 0xb7, 0x05, 0xb7, 0x99, 0xe0, 0x5c, 0xb7, 0xdb,
	0xe8, 0x2a, 0x2c, 0xb0, 0x2b, 0x6e, 0x29, 0x28, 0x6b, 0xc6, 0x70, 0x51, 0x2b, 0x06, 0x62, 0xee,
	0xad, 0x81, 0x8d, 0xd2, 0x37, 0x50, 0x88, 0xba, 0x8e, 0x92, 0x50, 0xe4, 0x24, 0xdc, 0x8e, 0x93,
	0x50, 0x39, 0x8a, 0xed, 0x28, 0x0b, 0x3f, 0x24, 0xe0, 0xf4, 0x7a, 0xa7, 0xe3, 0xe2, 0x8e, 0x4e,
	0x71, 0xd8, 0x89, 0xb7, 0xc3, 0x5e, 0x92, 0xa6, 0x19, 0x9c, 0x6c, 0xdd, 0xb0, 0xb1, 0x36, 0x20,
	0xbd, 0x6b, 0x62, 0xab, 0xed, 0x89, 0xd9, 0xb7, 0x12, 0x57, 0x1c, 0xf7, 0xa3, 0x6e, 0x32, 0x30,
	0x67, 0x54, 0x68, 0x06, 0xe5, 0xea, 0xe9, 0x7d, 0xc7, 0xc2, 0x4d, 0xde, 0xa3, 0x49, 0xd6, 0xa3,
	0x79, 0x2e, 0xfb, 0x3c, 0x10, 0xbd, 0x31, 0x73, 0x77, 0x21, 0x1f, 0xf1, 0x70, 0x54, 0x83, 0x65,
	0xa3, 0xb4, 0xfc, 0x91, 0x86, 0xdc, 0x30, 0x5c, 0x74, 0x6f, 0x6c, 0x05, 0x5c, 0x9e, 0xf1, 0x2e,
	0x41, 0x8d, 0x78, 0x90, 0xd8, 0x07, 0x77, 0xe2, 0xfb, 0x40, 0x99, 0xa5, 0x3b, 0x39, 0x47, 0xea,
	0xb1, 0xc1, 0xce, 0x7f, 0x9c, 0x5e, 0x9d, 0xa5, 0xbe, 0x19, 0x0e, 0x7c, 0x6e, 0x22, 0xb2, 0x00,
	0xea, 0x63, 0x5d, 0x7c, 0xa8, 0x99, 0x61, 0xab, 0x08, 0x33, 0xa3, 0x35, 0xb3, 0x0e, 0x59, 0x87,
	0x78, 0x9e, 0xd9, 0xb2, 0xb0, 0x9c, 0x62, 0x46, 0xae, 0xcc, 0x32, 0xb2, 0x2d, 0x70, 0xdc, 0xc6,
	0x50, 0x6d, 0x34, 0x18, 0xd3, 0xd1, 0xc1, 0x78, 0x0d, 0xd2, 0x3c, 0xbb, 0x72, 0x86, 0x99, 0x5d,
	0x8c, 0x9b, 0xdd, 0x32, 0xa9, 0x26, 0x00, 0xc1, 0x90, 0x37, 0x82, 0x72, 0x96, 0xb3, 0x62, 0xc8,
	0x4f, 0x56, 0xba, 0xc6, 0x11, 0xa5, 0x06, 0xe4, 0x23, 0xd9, 0x98, 0x92, 0x7c, 0x35, 0xde, 0x35,
	0xf2, 0xac, 0x01, 0x1f, 0x29, 0x8b, 0x92, 0x76, 0xc4, 0xc4, 0x7e, 0x1b, 0x9b, 0x3b, 0x70, 0x2a,
	0x9e, 0xbb, 0x93, 0xb3, 0x1b, 0x4f, 0xe6, 0x09, 0xd9, 0xbd, 0x07, 0xc5, 0x58, 0x7e, 0x8f, 0xb5,
	0xb8, 0x34, 0x38, 0x13, 0x1b, 0x1f, 0x9e, 0x43, 0x6c, 0x0f, 0xa3, 0x2b, 0x30, 0xdf, 0x35, 0x87,
	0xe3, 0x77, 0x4a, 0x01, 0xb0, 0xeb, 0xf8, 0x62, 0x9d, 0x17, 0xf5, 0xa3, 0x7c, 0x0d, 0xd9, 0xba,
	0xbd, 0x8f, 0x2d, 0xe2, 0xc4, 0x7f, 0x8e, 0x48, 0x6f, 0xf6, 0x73, 0x04, 0xc9, 0x90, 0x71, 0xf4,
	0x81, 0x45, 0x74, 0xfe, 0xa3, 0xa2, 0xa0, 0x85, 0x47, 0xe5, 0x32, 0x64, 0x1a, 0xbe, 0x61, 0x60,
	0xcf, 0x0b, 0x40, 0x1e, 0xff, 0x64, 0x76, 0xb3, 0x5a, 0x78, 0x54, 0x16, 0xa0, 0xb8, 0x85, 0x75,
	0x8b, 0x76, 0xc5, 0x54, 0x5b, 0x7d, 0x2e, 0x41, 0xa6, 0x6e, 0xef, 0xf9, 0xd8, 0xc7, 0xa8, 0x01,
	0x99, 0x86, 0x3e, 0xd8, 0xf6, 0xbd, 0x2e, 0x1a, 0x0b, 0x24, 0x0c, 0xb9, 0xf4, 0xc1, 0xd8, 0x74,
	0x15, 0x66, 0xcf, 0x7f, 0xfb, 0xfb, 0xdf, 0x4f, 0x13, 0x8b, 0x4a, 0x81, 0xfd, 0x07, 0x7c, 0xff,
	0xe3, 0x9a, 0xe3, 0x7b, 0xdd, 0x35, 0x69, 0xa5, 0x2a, 0xa1, 0x6d, 0xc8, 0x35, 0xf4, 0x01, 0x77,
	0x8a, 0x2e, 0x8e, 0x91, 0x15, 0x0d, 0x65, 0x96, 0xed, 0x05, 0x66, 0x3b, 0x87, 0x32, 0xb5, 0x2e,
	0x83, 0xaf, 0xbe, 0x4a, 0x42, 0x9a, 0xe7, 0xe5, 0xdd, 0x44, 0xdc, 0x63, 0x11, 0x0b, 0x0f, 0x47,
	0xae, 0x93, 0xd2, 0xf2, 0x21, 0x08, 0x5e, 0x31, 0xca, 0x05, 0xe6, 0xec, 0x8c, 0x72, 0x2a, 0x74,
	0xc6, 0xa7, 0xed, 0x9a, 0xb4, 0x82, 0x1e, 0x43, 0xb6, 0xa1, 0x0f, 0x36, 0x31, 0x7d, 0x23, 0x5f,
	0x93, 0xc5, 0xa6, 0xc8, 0xcc, 0x36, 0x52, 0x8a, 0xa1, 0xed, 0xdd, 0xc0, 0xd6, 0x9a, 0xb4, 0x72,
	0x53, 0x42, 0x18, 0x0a, 0x0d, 0x7d, 0x30, 0x5a, 0x0d, 0xe5, 0xc3, 0x57, 0x5c, 0xe9, 0xfc, 0x8c,
	0x7b, 0xe5, 0x12, 0x73, 0x72, 0x4e, 0x59, 0x0c, 0x9d, 0xe8, 0xe1, 0x55, 0xf0, 0x86, 0x13, 0x4f,
	0xf1, 0xc6, 0xa5, 0x17, 0xaf, 0xcb, 0xd2, 0xcb, 0xd7, 0x65, 0xe9, 0xd5, 0xeb, 0xb2, 0xf4, 0xe4,
	0xa0, 0x3c, 0xf7, 0xdb, 0x41, 0x59, 0x7a, 0x79, 0x50, 0x9e, 0xfb, 0xf3, 0xa0, 0x3c, 0xd7, 0x4a,
	0xb3, 0xbf, 0xea, 0x7c, 0xf2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x75, 0xfe, 0xdb, 0x0f, 0x75,
	0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EnqueueClient is the client API for Enqueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EnqueueClient interface {
	SayPush(ctx context.Context, opts ...grpc.CallOption) (Enqueue_SayPushClient, error)
	SayHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*Success, error)
}

type enqueueClient struct {
	cc *grpc.ClientConn
}

func NewEnqueueClient(cc *grpc.ClientConn) EnqueueClient {
	return &enqueueClient{cc}
}

func (c *enqueueClient) SayPush(ctx context.Context, opts ...grpc.CallOption) (Enqueue_SayPushClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Enqueue_serviceDesc.Streams[0], "/blackrock.io.Enqueue/SayPush", opts...)
	if err != nil {
		return nil, err
	}
	x := &enqueueSayPushClient{stream}
	return x, nil
}

type Enqueue_SayPushClient interface {
	Send(*Envelope) error
	CloseAndRecv() (*Success, error)
	grpc.ClientStream
}

type enqueueSayPushClient struct {
	grpc.ClientStream
}

func (x *enqueueSayPushClient) Send(m *Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *enqueueSayPushClient) CloseAndRecv() (*Success, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Success)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *enqueueClient) SayHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/blackrock.io.Enqueue/SayHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnqueueServer is the server API for Enqueue service.
type EnqueueServer interface {
	SayPush(Enqueue_SayPushServer) error
	SayHealth(context.Context, *HealthRequest) (*Success, error)
}

// UnimplementedEnqueueServer can be embedded to have forward compatible implementations.
type UnimplementedEnqueueServer struct {
}

func (*UnimplementedEnqueueServer) SayPush(srv Enqueue_SayPushServer) error {
	return status.Errorf(codes.Unimplemented, "method SayPush not implemented")
}
func (*UnimplementedEnqueueServer) SayHealth(ctx context.Context, req *HealthRequest) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHealth not implemented")
}

func RegisterEnqueueServer(s *grpc.Server, srv EnqueueServer) {
	s.RegisterService(&_Enqueue_serviceDesc, srv)
}

func _Enqueue_SayPush_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EnqueueServer).SayPush(&enqueueSayPushServer{stream})
}

type Enqueue_SayPushServer interface {
	SendAndClose(*Success) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type enqueueSayPushServer struct {
	grpc.ServerStream
}

func (x *enqueueSayPushServer) SendAndClose(m *Success) error {
	return x.ServerStream.SendMsg(m)
}

func (x *enqueueSayPushServer) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Enqueue_SayHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnqueueServer).SayHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blackrock.io.Enqueue/SayHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnqueueServer).SayHealth(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Enqueue_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blackrock.io.Enqueue",
	HandlerType: (*EnqueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHealth",
			Handler:    _Enqueue_SayHealth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayPush",
			Handler:       _Enqueue_SayPush_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "spec.proto",
}

// SearchClient is the client API for Search service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchClient interface {
	SayPush(ctx context.Context, opts ...grpc.CallOption) (Search_SayPushClient, error)
	SaySearch(ctx context.Context, in *SearchQueryRequest, opts ...grpc.CallOption) (*SearchQueryResponse, error)
	SayFetch(ctx context.Context, in *SearchQueryRequest, opts ...grpc.CallOption) (Search_SayFetchClient, error)
	SayAggregate(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*Aggregate, error)
	SayHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*Success, error)
}

type searchClient struct {
	cc *grpc.ClientConn
}

func NewSearchClient(cc *grpc.ClientConn) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) SayPush(ctx context.Context, opts ...grpc.CallOption) (Search_SayPushClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Search_serviceDesc.Streams[0], "/blackrock.io.Search/SayPush", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchSayPushClient{stream}
	return x, nil
}

type Search_SayPushClient interface {
	Send(*Envelope) error
	CloseAndRecv() (*Success, error)
	grpc.ClientStream
}

type searchSayPushClient struct {
	grpc.ClientStream
}

func (x *searchSayPushClient) Send(m *Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *searchSayPushClient) CloseAndRecv() (*Success, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Success)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *searchClient) SaySearch(ctx context.Context, in *SearchQueryRequest, opts ...grpc.CallOption) (*SearchQueryResponse, error) {
	out := new(SearchQueryResponse)
	err := c.cc.Invoke(ctx, "/blackrock.io.Search/SaySearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) SayFetch(ctx context.Context, in *SearchQueryRequest, opts ...grpc.CallOption) (Search_SayFetchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Search_serviceDesc.Streams[1], "/blackrock.io.Search/SayFetch", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchSayFetchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Search_SayFetchClient interface {
	Recv() (*Hit, error)
	grpc.ClientStream
}

type searchSayFetchClient struct {
	grpc.ClientStream
}

func (x *searchSayFetchClient) Recv() (*Hit, error) {
	m := new(Hit)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *searchClient) SayAggregate(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*Aggregate, error) {
	out := new(Aggregate)
	err := c.cc.Invoke(ctx, "/blackrock.io.Search/SayAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) SayHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/blackrock.io.Search/SayHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServer is the server API for Search service.
type SearchServer interface {
	SayPush(Search_SayPushServer) error
	SaySearch(context.Context, *SearchQueryRequest) (*SearchQueryResponse, error)
	SayFetch(*SearchQueryRequest, Search_SayFetchServer) error
	SayAggregate(context.Context, *AggregateRequest) (*Aggregate, error)
	SayHealth(context.Context, *HealthRequest) (*Success, error)
}

// UnimplementedSearchServer can be embedded to have forward compatible implementations.
type UnimplementedSearchServer struct {
}

func (*UnimplementedSearchServer) SayPush(srv Search_SayPushServer) error {
	return status.Errorf(codes.Unimplemented, "method SayPush not implemented")
}
func (*UnimplementedSearchServer) SaySearch(ctx context.Context, req *SearchQueryRequest) (*SearchQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaySearch not implemented")
}
func (*UnimplementedSearchServer) SayFetch(req *SearchQueryRequest, srv Search_SayFetchServer) error {
	return status.Errorf(codes.Unimplemented, "method SayFetch not implemented")
}
func (*UnimplementedSearchServer) SayAggregate(ctx context.Context, req *AggregateRequest) (*Aggregate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayAggregate not implemented")
}
func (*UnimplementedSearchServer) SayHealth(ctx context.Context, req *HealthRequest) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHealth not implemented")
}

func RegisterSearchServer(s *grpc.Server, srv SearchServer) {
	s.RegisterService(&_Search_serviceDesc, srv)
}

func _Search_SayPush_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SearchServer).SayPush(&searchSayPushServer{stream})
}

type Search_SayPushServer interface {
	SendAndClose(*Success) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type searchSayPushServer struct {
	grpc.ServerStream
}

func (x *searchSayPushServer) SendAndClose(m *Success) error {
	return x.ServerStream.SendMsg(m)
}

func (x *searchSayPushServer) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Search_SaySearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SaySearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blackrock.io.Search/SaySearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SaySearch(ctx, req.(*SearchQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_SayFetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchServer).SayFetch(m, &searchSayFetchServer{stream})
}

type Search_SayFetchServer interface {
	Send(*Hit) error
	grpc.ServerStream
}

type searchSayFetchServer struct {
	grpc.ServerStream
}

func (x *searchSayFetchServer) Send(m *Hit) error {
	return x.ServerStream.SendMsg(m)
}

func _Search_SayAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SayAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blackrock.io.Search/SayAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SayAggregate(ctx, req.(*AggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_SayHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SayHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blackrock.io.Search/SayHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SayHealth(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Search_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blackrock.io.Search",
	HandlerType: (*SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaySearch",
			Handler:    _Search_SaySearch_Handler,
		},
		{
			MethodName: "SayAggregate",
			Handler:    _Search_SayAggregate_Handler,
		},
		{
			MethodName: "SayHealth",
			Handler:    _Search_SayHealth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayPush",
			Handler:       _Search_SayPush_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayFetch",
			Handler:       _Search_SayFetch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spec.proto",
}

func (m *KV) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KV) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KV) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KF) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KF) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KF) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Numeric) > 0 {
		for iNdEx := len(m.Numeric) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Numeric[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.Id != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Id))
		i--
		dAtA[i] = 0x61
	}
	if len(m.Track) > 0 {
		for k := range m.Track {
			v := m.Track[k]
			baseI := i
			i = encodeVarintSpec(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSpec(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSpec(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.ForeignType) > 0 {
		i -= len(m.ForeignType)
		copy(dAtA[i:], m.ForeignType)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.ForeignType)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ForeignId) > 0 {
		i -= len(m.ForeignId)
		copy(dAtA[i:], m.ForeignId)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.ForeignId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EventType) > 0 {
		i -= len(m.EventType)
		copy(dAtA[i:], m.EventType)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.EventType)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CreatedAtNs != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.CreatedAtNs))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Properties) > 0 {
		for iNdEx := len(m.Properties) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Properties[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Count) > 0 {
		for iNdEx := len(m.Count) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Count[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Search) > 0 {
		for iNdEx := len(m.Search) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Search[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SearchableMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchableMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchableMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Track) > 0 {
		for k := range m.Track {
			v := m.Track[k]
			baseI := i
			i = encodeVarintSpec(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSpec(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSpec(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.ForeignType) > 0 {
		i -= len(m.ForeignType)
		copy(dAtA[i:], m.ForeignType)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.ForeignType)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ForeignId) > 0 {
		i -= len(m.ForeignId)
		copy(dAtA[i:], m.ForeignId)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.ForeignId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EventType) > 0 {
		i -= len(m.EventType)
		copy(dAtA[i:], m.EventType)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.EventType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Search) > 0 {
		for iNdEx := len(m.Search) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Search[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BasicMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasicMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BasicMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForeignType) > 0 {
		i -= len(m.ForeignType)
		copy(dAtA[i:], m.ForeignType)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.ForeignType)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ForeignId) > 0 {
		i -= len(m.ForeignId)
		copy(dAtA[i:], m.ForeignId)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.ForeignId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EventType) > 0 {
		i -= len(m.EventType)
		copy(dAtA[i:], m.EventType)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.EventType)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CreatedAtNs != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.CreatedAtNs))
		i--
		dAtA[i] = 0x28
	}
	return len(dAtA) - i, nil
}

func (m *NumericMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NumericMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NumericMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Numeric) > 0 {
		for iNdEx := len(m.Numeric) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Numeric[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.ForeignType) > 0 {
		i -= len(m.ForeignType)
		copy(dAtA[i:], m.ForeignType)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.ForeignType)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ForeignId) > 0 {
		i -= len(m.ForeignId)
		copy(dAtA[i:], m.ForeignId)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.ForeignId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EventType) > 0 {
		i -= len(m.EventType)
		copy(dAtA[i:], m.EventType)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.EventType)))
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}

func (m *CountableMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountableMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountableMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForeignType) > 0 {
		i -= len(m.ForeignType)
		copy(dAtA[i:], m.ForeignType)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.ForeignType)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ForeignId) > 0 {
		i -= len(m.ForeignId)
		copy(dAtA[i:], m.ForeignId)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.ForeignId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EventType) > 0 {
		i -= len(m.EventType)
		copy(dAtA[i:], m.EventType)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.EventType)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CreatedAtNs != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.CreatedAtNs))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Count) > 0 {
		for iNdEx := len(m.Count) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Count[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Search) > 0 {
		for iNdEx := len(m.Search) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Search[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Hit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Score != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Score))))
		i--
		dAtA[i] = 0x15
	}
	if m.Id != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SearchQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ToSecond != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.ToSecond))
		i--
		dAtA[i] = 0x10
	}
	if m.FromSecond != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.FromSecond))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CountPerKV) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountPerKV) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountPerKV) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Total != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Count) > 0 {
		for k := range m.Count {
			v := m.Count[k]
			baseI := i
			i = encodeVarintSpec(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSpec(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSpec(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PointPerEventType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PointPerEventType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PointPerEventType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventType) > 0 {
		i -= len(m.EventType)
		copy(dAtA[i:], m.EventType)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.EventType)))
		i--
		dAtA[i] = 0x22
	}
	if m.Bucket != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.Bucket))
		i--
		dAtA[i] = 0x18
	}
	if m.CountUnique != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.CountUnique))
		i--
		dAtA[i] = 0x10
	}
	if m.Count != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChartBucketPerTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChartBucketPerTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChartBucketPerTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PerType) > 0 {
		for k := range m.PerType {
			v := m.PerType[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSpec(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSpec(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSpec(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Chart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeBucketSec != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.TimeBucketSec))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeEnd != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.TimeEnd))
		i--
		dAtA[i] = 0x18
	}
	if m.TimeStart != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.TimeStart))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Buckets) > 0 {
		for k := range m.Buckets {
			v := m.Buckets[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSpec(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintSpec(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSpec(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AggregateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeBucketSec != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.TimeBucketSec))
		i--
		dAtA[i] = 0x20
	}
	if m.SampleLimit != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.SampleLimit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Fields) > 0 {
		for k := range m.Fields {
			v := m.Fields[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSpec(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSpec(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Aggregate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Aggregate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Aggregate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Chart != nil {
		{
			size, err := m.Chart.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Sample) > 0 {
		for iNdEx := len(m.Sample) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sample[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Total != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Possible) > 0 {
		for k := range m.Possible {
			v := m.Possible[k]
			baseI := i
			i = encodeVarintSpec(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSpec(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSpec(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.EventType) > 0 {
		for k := range m.EventType {
			v := m.EventType[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSpec(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSpec(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSpec(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ForeignId) > 0 {
		for k := range m.ForeignId {
			v := m.ForeignId[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSpec(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSpec(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSpec(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Count) > 0 {
		for k := range m.Count {
			v := m.Count[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSpec(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSpec(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSpec(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Search) > 0 {
		for k := range m.Search {
			v := m.Search[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSpec(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSpec(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSpec(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SearchQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hits) > 0 {
		for iNdEx := len(m.Hits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Envelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Envelope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Envelope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Success) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Success) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Success) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HealthRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HealthRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintSpec(dAtA []byte, offset int, v uint64) int {
	offset -= sovSpec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KV) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *KF) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Search) > 0 {
		for _, e := range m.Search {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if len(m.Count) > 0 {
		for _, e := range m.Count {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if len(m.Properties) > 0 {
		for _, e := range m.Properties {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if m.CreatedAtNs != 0 {
		n += 1 + sovSpec(uint64(m.CreatedAtNs))
	}
	l = len(m.EventType)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.ForeignId)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.ForeignType)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if len(m.Track) > 0 {
		for k, v := range m.Track {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSpec(uint64(len(k))) + 1 + sovSpec(uint64(v))
			n += mapEntrySize + 1 + sovSpec(uint64(mapEntrySize))
		}
	}
	if m.Id != 0 {
		n += 9
	}
	if len(m.Numeric) > 0 {
		for _, e := range m.Numeric {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	return n
}

func (m *SearchableMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Search) > 0 {
		for _, e := range m.Search {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	l = len(m.EventType)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.ForeignId)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.ForeignType)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if len(m.Track) > 0 {
		for k, v := range m.Track {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSpec(uint64(len(k))) + 1 + sovSpec(uint64(v))
			n += mapEntrySize + 1 + sovSpec(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BasicMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreatedAtNs != 0 {
		n += 1 + sovSpec(uint64(m.CreatedAtNs))
	}
	l = len(m.EventType)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.ForeignId)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.ForeignType)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *NumericMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventType)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.ForeignId)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.ForeignType)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if len(m.Numeric) > 0 {
		for _, e := range m.Numeric {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	return n
}

func (m *CountableMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Search) > 0 {
		for _, e := range m.Search {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if len(m.Count) > 0 {
		for _, e := range m.Count {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if m.CreatedAtNs != 0 {
		n += 1 + sovSpec(uint64(m.CreatedAtNs))
	}
	l = len(m.EventType)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.ForeignId)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.ForeignType)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *Hit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSpec(uint64(m.Id))
	}
	if m.Score != 0 {
		n += 5
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *SearchQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromSecond != 0 {
		n += 1 + sovSpec(uint64(m.FromSecond))
	}
	if m.ToSecond != 0 {
		n += 1 + sovSpec(uint64(m.ToSecond))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovSpec(uint64(m.Limit))
	}
	return n
}

func (m *CountPerKV) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Count) > 0 {
		for k, v := range m.Count {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSpec(uint64(len(k))) + 1 + sovSpec(uint64(v))
			n += mapEntrySize + 1 + sovSpec(uint64(mapEntrySize))
		}
	}
	if m.Total != 0 {
		n += 1 + sovSpec(uint64(m.Total))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *PointPerEventType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovSpec(uint64(m.Count))
	}
	if m.CountUnique != 0 {
		n += 1 + sovSpec(uint64(m.CountUnique))
	}
	if m.Bucket != 0 {
		n += 1 + sovSpec(uint64(m.Bucket))
	}
	l = len(m.EventType)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *ChartBucketPerTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PerType) > 0 {
		for k, v := range m.PerType {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSpec(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSpec(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSpec(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Chart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for k, v := range m.Buckets {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSpec(uint64(l))
			}
			mapEntrySize := 1 + sovSpec(uint64(k)) + l
			n += mapEntrySize + 1 + sovSpec(uint64(mapEntrySize))
		}
	}
	if m.TimeStart != 0 {
		n += 1 + sovSpec(uint64(m.TimeStart))
	}
	if m.TimeEnd != 0 {
		n += 1 + sovSpec(uint64(m.TimeEnd))
	}
	if m.TimeBucketSec != 0 {
		n += 1 + sovSpec(uint64(m.TimeBucketSec))
	}
	return n
}

func (m *AggregateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if len(m.Fields) > 0 {
		for k, v := range m.Fields {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSpec(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovSpec(uint64(mapEntrySize))
		}
	}
	if m.SampleLimit != 0 {
		n += 1 + sovSpec(uint64(m.SampleLimit))
	}
	if m.TimeBucketSec != 0 {
		n += 1 + sovSpec(uint64(m.TimeBucketSec))
	}
	return n
}

func (m *Aggregate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Search) > 0 {
		for k, v := range m.Search {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSpec(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSpec(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSpec(uint64(mapEntrySize))
		}
	}
	if len(m.Count) > 0 {
		for k, v := range m.Count {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSpec(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSpec(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSpec(uint64(mapEntrySize))
		}
	}
	if len(m.ForeignId) > 0 {
		for k, v := range m.ForeignId {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSpec(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSpec(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSpec(uint64(mapEntrySize))
		}
	}
	if len(m.EventType) > 0 {
		for k, v := range m.EventType {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSpec(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSpec(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSpec(uint64(mapEntrySize))
		}
	}
	if len(m.Possible) > 0 {
		for k, v := range m.Possible {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSpec(uint64(len(k))) + 1 + sovSpec(uint64(v))
			n += mapEntrySize + 1 + sovSpec(uint64(mapEntrySize))
		}
	}
	if m.Total != 0 {
		n += 1 + sovSpec(uint64(m.Total))
	}
	if len(m.Sample) > 0 {
		for _, e := range m.Sample {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if m.Chart != nil {
		l = m.Chart.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *SearchQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hits) > 0 {
		for _, e := range m.Hits {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovSpec(uint64(m.Total))
	}
	return n
}

func (m *Envelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *Success) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *HealthRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovSpec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSpec(x uint64) (n int) {
	return sovSpec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KV) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KV: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KV: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KF) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KF: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KF: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Search = append(m.Search, KV{})
			if err := m.Search[len(m.Search)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Count = append(m.Count, KV{})
			if err := m.Count[len(m.Count)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = append(m.Properties, KV{})
			if err := m.Properties[len(m.Properties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtNs", wireType)
			}
			m.CreatedAtNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Track", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Track == nil {
				m.Track = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpec(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSpec
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Track[mapkey] = mapvalue
			iNdEx = postIndex
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numeric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Numeric = append(m.Numeric, KF{})
			if err := m.Numeric[len(m.Numeric)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchableMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchableMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchableMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Search = append(m.Search, KV{})
			if err := m.Search[len(m.Search)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Track", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Track == nil {
				m.Track = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpec(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSpec
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Track[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BasicMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasicMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasicMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtNs", wireType)
			}
			m.CreatedAtNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NumericMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NumericMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NumericMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numeric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Numeric = append(m.Numeric, KF{})
			if err := m.Numeric[len(m.Numeric)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountableMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountableMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountableMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Search = append(m.Search, KV{})
			if err := m.Search[len(m.Search)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Count = append(m.Count, KV{})
			if err := m.Count[len(m.Count)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtNs", wireType)
			}
			m.CreatedAtNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Score = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSecond", wireType)
			}
			m.FromSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromSecond |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToSecond", wireType)
			}
			m.ToSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToSecond |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &go_query_dsl.Query{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountPerKV) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountPerKV: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountPerKV: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Count == nil {
				m.Count = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpec(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSpec
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Count[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PointPerEventType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PointPerEventType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PointPerEventType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountUnique", wireType)
			}
			m.CountUnique = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountUnique |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			m.Bucket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bucket |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChartBucketPerTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChartBucketPerTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChartBucketPerTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerType == nil {
				m.PerType = make(map[string]*PointPerEventType)
			}
			var mapkey string
			var mapvalue *PointPerEventType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSpec
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSpec
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PointPerEventType{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpec(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSpec
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PerType[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Chart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buckets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buckets == nil {
				m.Buckets = make(map[uint32]*ChartBucketPerTime)
			}
			var mapkey uint32
			var mapvalue *ChartBucketPerTime
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSpec
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSpec
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ChartBucketPerTime{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpec(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSpec
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Buckets[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStart", wireType)
			}
			m.TimeStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStart |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeEnd", wireType)
			}
			m.TimeEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeEnd |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeBucketSec", wireType)
			}
			m.TimeBucketSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeBucketSec |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &SearchQueryRequest{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpec(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSpec
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Fields[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleLimit", wireType)
			}
			m.SampleLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SampleLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeBucketSec", wireType)
			}
			m.TimeBucketSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeBucketSec |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Aggregate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Aggregate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Aggregate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Search == nil {
				m.Search = make(map[string]*CountPerKV)
			}
			var mapkey string
			var mapvalue *CountPerKV
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSpec
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSpec
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CountPerKV{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpec(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSpec
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Search[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Count == nil {
				m.Count = make(map[string]*CountPerKV)
			}
			var mapkey string
			var mapvalue *CountPerKV
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSpec
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSpec
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CountPerKV{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpec(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSpec
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Count[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForeignId == nil {
				m.ForeignId = make(map[string]*CountPerKV)
			}
			var mapkey string
			var mapvalue *CountPerKV
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSpec
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSpec
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CountPerKV{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpec(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSpec
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ForeignId[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventType == nil {
				m.EventType = make(map[string]*CountPerKV)
			}
			var mapkey string
			var mapvalue *CountPerKV
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSpec
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSpec
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CountPerKV{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpec(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSpec
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EventType[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Possible", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Possible == nil {
				m.Possible = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSpec
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpec(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSpec
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Possible[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sample", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sample = append(m.Sample, &Hit{})
			if err := m.Sample[len(m.Sample)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chart == nil {
				m.Chart = &Chart{}
			}
			if err := m.Chart.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hits = append(m.Hits, &Hit{})
			if err := m.Hits[len(m.Hits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Envelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Envelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Envelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Success) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Success: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Success: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpec
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSpec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSpec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSpec
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSpec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpec   = fmt.Errorf("proto: integer overflow")
)
