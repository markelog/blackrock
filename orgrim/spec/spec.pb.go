// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spec.proto

package spec

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type KV struct {
	Key     string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value   string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Context uint64 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *KV) Reset()         { *m = KV{} }
func (m *KV) String() string { return proto.CompactTextString(m) }
func (*KV) ProtoMessage()    {}
func (*KV) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{0}
}
func (m *KV) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KV.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KV.Merge(m, src)
}
func (m *KV) XXX_Size() int {
	return m.Size()
}
func (m *KV) XXX_DiscardUnknown() {
	xxx_messageInfo_KV.DiscardUnknown(m)
}

var xxx_messageInfo_KV proto.InternalMessageInfo

func (m *KV) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KV) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *KV) GetContext() uint64 {
	if m != nil {
		return m.Context
	}
	return 0
}

type Metadata struct {
	Tags        []*KV  `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	Properties  []*KV  `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
	CreatedAtNs int64  `protobuf:"varint,5,opt,name=created_at_ns,json=createdAtNs,proto3" json:"created_at_ns,omitempty"`
	EventType   string `protobuf:"bytes,7,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	ForeignId   string `protobuf:"bytes,9,opt,name=foreign_id,json=foreignId,proto3" json:"foreign_id,omitempty"`
	ForeignType string `protobuf:"bytes,10,opt,name=foreign_type,json=foreignType,proto3" json:"foreign_type,omitempty"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{1}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetTags() []*KV {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Metadata) GetProperties() []*KV {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Metadata) GetCreatedAtNs() int64 {
	if m != nil {
		return m.CreatedAtNs
	}
	return 0
}

func (m *Metadata) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *Metadata) GetForeignId() string {
	if m != nil {
		return m.ForeignId
	}
	return ""
}

func (m *Metadata) GetForeignType() string {
	if m != nil {
		return m.ForeignType
	}
	return ""
}

type Context struct {
	Properties  []*KV  `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
	CreatedAtNs int64  `protobuf:"varint,5,opt,name=created_at_ns,json=createdAtNs,proto3" json:"created_at_ns,omitempty"`
	ForeignId   string `protobuf:"bytes,6,opt,name=foreign_id,json=foreignId,proto3" json:"foreign_id,omitempty"`
	ForeignType string `protobuf:"bytes,7,opt,name=foreign_type,json=foreignType,proto3" json:"foreign_type,omitempty"`
}

func (m *Context) Reset()         { *m = Context{} }
func (m *Context) String() string { return proto.CompactTextString(m) }
func (*Context) ProtoMessage()    {}
func (*Context) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{2}
}
func (m *Context) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Context) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Context.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Context) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Context.Merge(m, src)
}
func (m *Context) XXX_Size() int {
	return m.Size()
}
func (m *Context) XXX_DiscardUnknown() {
	xxx_messageInfo_Context.DiscardUnknown(m)
}

var xxx_messageInfo_Context proto.InternalMessageInfo

func (m *Context) GetProperties() []*KV {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Context) GetCreatedAtNs() int64 {
	if m != nil {
		return m.CreatedAtNs
	}
	return 0
}

func (m *Context) GetForeignId() string {
	if m != nil {
		return m.ForeignId
	}
	return ""
}

func (m *Context) GetForeignType() string {
	if m != nil {
		return m.ForeignType
	}
	return ""
}

type Envelope struct {
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Payload  []byte    `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Envelope) Reset()         { *m = Envelope{} }
func (m *Envelope) String() string { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()    {}
func (*Envelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{3}
}
func (m *Envelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Envelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Envelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Envelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Envelope.Merge(m, src)
}
func (m *Envelope) XXX_Size() int {
	return m.Size()
}
func (m *Envelope) XXX_DiscardUnknown() {
	xxx_messageInfo_Envelope.DiscardUnknown(m)
}

var xxx_messageInfo_Envelope proto.InternalMessageInfo

func (m *Envelope) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Envelope) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type PersistedMetadata struct {
	TagKeys        []uint64 `protobuf:"varint,1,rep,packed,name=tagKeys,proto3" json:"tagKeys,omitempty"`
	TagValues      []string `protobuf:"bytes,2,rep,name=tagValues,proto3" json:"tagValues,omitempty"`
	PropertyKeys   []uint64 `protobuf:"varint,3,rep,packed,name=propertyKeys,proto3" json:"propertyKeys,omitempty"`
	PropertyValues []string `protobuf:"bytes,4,rep,name=propertyValues,proto3" json:"propertyValues,omitempty"`
	CreatedAtNs    int64    `protobuf:"varint,5,opt,name=created_at_ns,json=createdAtNs,proto3" json:"created_at_ns,omitempty"`
	EventType      uint64   `protobuf:"varint,7,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Offset         uint64   `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	Partition      uint32   `protobuf:"varint,9,opt,name=partition,proto3" json:"partition,omitempty"`
	ForeignId      string   `protobuf:"bytes,10,opt,name=foreign_id,json=foreignId,proto3" json:"foreign_id,omitempty"`
	ForeignType    uint64   `protobuf:"varint,11,opt,name=foreign_type,json=foreignType,proto3" json:"foreign_type,omitempty"`
	Payload        uint64   `protobuf:"varint,12,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *PersistedMetadata) Reset()         { *m = PersistedMetadata{} }
func (m *PersistedMetadata) String() string { return proto.CompactTextString(m) }
func (*PersistedMetadata) ProtoMessage()    {}
func (*PersistedMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{4}
}
func (m *PersistedMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersistedMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersistedMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersistedMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistedMetadata.Merge(m, src)
}
func (m *PersistedMetadata) XXX_Size() int {
	return m.Size()
}
func (m *PersistedMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistedMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_PersistedMetadata proto.InternalMessageInfo

func (m *PersistedMetadata) GetTagKeys() []uint64 {
	if m != nil {
		return m.TagKeys
	}
	return nil
}

func (m *PersistedMetadata) GetTagValues() []string {
	if m != nil {
		return m.TagValues
	}
	return nil
}

func (m *PersistedMetadata) GetPropertyKeys() []uint64 {
	if m != nil {
		return m.PropertyKeys
	}
	return nil
}

func (m *PersistedMetadata) GetPropertyValues() []string {
	if m != nil {
		return m.PropertyValues
	}
	return nil
}

func (m *PersistedMetadata) GetCreatedAtNs() int64 {
	if m != nil {
		return m.CreatedAtNs
	}
	return 0
}

func (m *PersistedMetadata) GetEventType() uint64 {
	if m != nil {
		return m.EventType
	}
	return 0
}

func (m *PersistedMetadata) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *PersistedMetadata) GetPartition() uint32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *PersistedMetadata) GetForeignId() string {
	if m != nil {
		return m.ForeignId
	}
	return ""
}

func (m *PersistedMetadata) GetForeignType() uint64 {
	if m != nil {
		return m.ForeignType
	}
	return 0
}

func (m *PersistedMetadata) GetPayload() uint64 {
	if m != nil {
		return m.Payload
	}
	return 0
}

type PersistedContext struct {
	PropertyKeys   []uint64 `protobuf:"varint,3,rep,packed,name=propertyKeys,proto3" json:"propertyKeys,omitempty"`
	PropertyValues []string `protobuf:"bytes,4,rep,name=propertyValues,proto3" json:"propertyValues,omitempty"`
	CreatedAtNs    int64    `protobuf:"varint,5,opt,name=createdAtNs,proto3" json:"createdAtNs,omitempty"`
	ForeignId      string   `protobuf:"bytes,9,opt,name=foreign_id,json=foreignId,proto3" json:"foreign_id,omitempty"`
	ForeignType    uint64   `protobuf:"varint,10,opt,name=foreign_type,json=foreignType,proto3" json:"foreign_type,omitempty"`
}

func (m *PersistedContext) Reset()         { *m = PersistedContext{} }
func (m *PersistedContext) String() string { return proto.CompactTextString(m) }
func (*PersistedContext) ProtoMessage()    {}
func (*PersistedContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{5}
}
func (m *PersistedContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersistedContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersistedContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersistedContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistedContext.Merge(m, src)
}
func (m *PersistedContext) XXX_Size() int {
	return m.Size()
}
func (m *PersistedContext) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistedContext.DiscardUnknown(m)
}

var xxx_messageInfo_PersistedContext proto.InternalMessageInfo

func (m *PersistedContext) GetPropertyKeys() []uint64 {
	if m != nil {
		return m.PropertyKeys
	}
	return nil
}

func (m *PersistedContext) GetPropertyValues() []string {
	if m != nil {
		return m.PropertyValues
	}
	return nil
}

func (m *PersistedContext) GetCreatedAtNs() int64 {
	if m != nil {
		return m.CreatedAtNs
	}
	return 0
}

func (m *PersistedContext) GetForeignId() string {
	if m != nil {
		return m.ForeignId
	}
	return ""
}

func (m *PersistedContext) GetForeignType() uint64 {
	if m != nil {
		return m.ForeignType
	}
	return 0
}

func init() {
	proto.RegisterType((*KV)(nil), "spec.KV")
	proto.RegisterType((*Metadata)(nil), "spec.Metadata")
	proto.RegisterType((*Context)(nil), "spec.Context")
	proto.RegisterType((*Envelope)(nil), "spec.Envelope")
	proto.RegisterType((*PersistedMetadata)(nil), "spec.PersistedMetadata")
	proto.RegisterType((*PersistedContext)(nil), "spec.PersistedContext")
}

func init() { proto.RegisterFile("spec.proto", fileDescriptor_423806180556987f) }

var fileDescriptor_423806180556987f = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0xcd, 0xc6, 0x6e, 0x62, 0x8f, 0xd3, 0xaa, 0xdf, 0xea, 0x13, 0xda, 0x43, 0xb1, 0x8c, 0x0f,
	0xc8, 0xe2, 0xd0, 0x43, 0xf9, 0x05, 0x80, 0x40, 0x42, 0x51, 0x51, 0xb5, 0x42, 0xb9, 0x46, 0x4b,
	0x3c, 0x89, 0x2c, 0x82, 0x77, 0x65, 0x0f, 0x11, 0xfe, 0x17, 0x5c, 0xf9, 0x3b, 0x9c, 0x38, 0xf6,
	0x06, 0x47, 0x94, 0x5c, 0xf9, 0x11, 0xc8, 0x6b, 0xbb, 0x75, 0xc3, 0x21, 0x08, 0xf5, 0xb6, 0xf3,
	0x66, 0x77, 0xfc, 0xf6, 0xbd, 0xb7, 0x06, 0x28, 0x0d, 0x2e, 0xce, 0x4d, 0xa1, 0x49, 0x73, 0xb7,
	0x5e, 0xc7, 0xaf, 0x60, 0x38, 0x9d, 0xf1, 0x53, 0x70, 0xde, 0x63, 0x25, 0x58, 0xc4, 0x12, 0x5f,
	0xd6, 0x4b, 0xfe, 0x3f, 0x1c, 0x6d, 0xd4, 0xfa, 0x23, 0x8a, 0xa1, 0xc5, 0x9a, 0x82, 0x0b, 0x18,
	0x2f, 0x74, 0x4e, 0xf8, 0x89, 0x84, 0x13, 0xb1, 0xc4, 0x95, 0x5d, 0x19, 0x7f, 0x67, 0xe0, 0x5d,
	0x22, 0xa9, 0x54, 0x91, 0xe2, 0x67, 0xe0, 0x92, 0x5a, 0x95, 0x82, 0x45, 0x4e, 0x12, 0x5c, 0x78,
	0xe7, 0xf6, 0xab, 0xd3, 0x99, 0xb4, 0x28, 0x4f, 0x00, 0x4c, 0xa1, 0x0d, 0x16, 0x94, 0x61, 0x29,
	0x86, 0x7b, 0x7b, 0x7a, 0x3d, 0x1e, 0xc3, 0xf1, 0xa2, 0x40, 0x45, 0x98, 0xce, 0x15, 0xcd, 0xf3,
	0x52, 0x1c, 0x45, 0x2c, 0x71, 0x64, 0xd0, 0x82, 0xcf, 0xe8, 0x4d, 0xc9, 0x1f, 0x02, 0xe0, 0x06,
	0x73, 0x9a, 0x53, 0x65, 0x50, 0x8c, 0x2d, 0x5b, 0xdf, 0x22, 0x6f, 0x2b, 0x83, 0x75, 0x7b, 0xa9,
	0x0b, 0xcc, 0x56, 0xf9, 0x3c, 0x4b, 0x85, 0xdf, 0xb4, 0x5b, 0xe4, 0x75, 0xca, 0x1f, 0xc1, 0xa4,
	0x6b, 0xdb, 0xf3, 0x60, 0x37, 0x04, 0x2d, 0x56, 0x4f, 0x88, 0xbf, 0x30, 0x18, 0xbf, 0x68, 0x6e,
	0x79, 0xff, 0xd4, 0x7b, 0xdc, 0x46, 0x87, 0xb8, 0x8d, 0xff, 0xe4, 0x76, 0x05, 0xde, 0xcb, 0x7c,
	0x83, 0x6b, 0x6d, 0x90, 0x3f, 0x01, 0xef, 0x43, 0x6b, 0x80, 0x35, 0x32, 0xb8, 0x38, 0x69, 0x98,
	0x75, 0xb6, 0xc8, 0x9b, 0x7e, 0xed, 0xa3, 0x51, 0xd5, 0x5a, 0xab, 0xd4, 0xfa, 0x3b, 0x91, 0x5d,
	0x19, 0xff, 0x1a, 0xc2, 0x7f, 0x57, 0x58, 0x94, 0x59, 0x49, 0x98, 0x5e, 0xf6, 0xf6, 0x93, 0x5a,
	0x4d, 0xb1, 0x6a, 0x3c, 0x75, 0x65, 0x57, 0xf2, 0x33, 0xf0, 0x49, 0xad, 0x66, 0x75, 0x3a, 0x1a,
	0x41, 0x7c, 0x79, 0x0b, 0xf0, 0x18, 0x26, 0xad, 0x26, 0x95, 0x3d, 0xec, 0xd8, 0xc3, 0x77, 0x30,
	0xfe, 0x18, 0x4e, 0xba, 0xba, 0x1d, 0xe3, 0xda, 0x31, 0x7b, 0xe8, 0x3f, 0x86, 0xc1, 0xed, 0x87,
	0xe1, 0x01, 0x8c, 0xf4, 0x72, 0x59, 0x22, 0x09, 0xcf, 0xb6, 0xda, 0xaa, 0xbe, 0x84, 0x51, 0x05,
	0x65, 0x94, 0xe9, 0xdc, 0x66, 0xe4, 0x58, 0xde, 0x02, 0x7b, 0x36, 0xc1, 0x21, 0x9b, 0x02, 0x3b,
	0xba, 0x6f, 0x53, 0x5f, 0xee, 0x49, 0xf3, 0x6c, 0x3a, 0xb9, 0xbf, 0x32, 0x38, 0xbd, 0x91, 0xbb,
	0x4b, 0xd9, 0x7d, 0xaa, 0x16, 0x41, 0x5f, 0xa0, 0xc3, 0x29, 0xfc, 0xab, 0x17, 0x72, 0xf7, 0x7a,
	0xcf, 0xc5, 0xb7, 0x6d, 0xc8, 0xae, 0xb7, 0x21, 0xfb, 0xb9, 0x0d, 0xd9, 0xe7, 0x5d, 0x38, 0xb8,
	0xde, 0x85, 0x83, 0x1f, 0xbb, 0x70, 0xf0, 0x6e, 0x64, 0x7f, 0x35, 0x4f, 0x7f, 0x07, 0x00, 0x00,
	0xff, 0xff, 0x43, 0x99, 0x3e, 0x84, 0x78, 0x04, 0x00, 0x00,
}

func (m *KV) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KV) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.Context))
	}
	return i, nil
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSpec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Properties) > 0 {
		for _, msg := range m.Properties {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSpec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CreatedAtNs != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.CreatedAtNs))
	}
	if len(m.EventType) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.EventType)))
		i += copy(dAtA[i:], m.EventType)
	}
	if len(m.ForeignId) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.ForeignId)))
		i += copy(dAtA[i:], m.ForeignId)
	}
	if len(m.ForeignType) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.ForeignType)))
		i += copy(dAtA[i:], m.ForeignType)
	}
	return i, nil
}

func (m *Context) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Context) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Properties) > 0 {
		for _, msg := range m.Properties {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSpec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CreatedAtNs != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.CreatedAtNs))
	}
	if len(m.ForeignId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.ForeignId)))
		i += copy(dAtA[i:], m.ForeignId)
	}
	if len(m.ForeignType) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.ForeignType)))
		i += copy(dAtA[i:], m.ForeignType)
	}
	return i, nil
}

func (m *Envelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Envelope) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.Metadata.Size()))
		n1, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *PersistedMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersistedMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TagKeys) > 0 {
		dAtA3 := make([]byte, len(m.TagKeys)*10)
		var j2 int
		for _, num := range m.TagKeys {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpec(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if len(m.TagValues) > 0 {
		for _, s := range m.TagValues {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.PropertyKeys) > 0 {
		dAtA5 := make([]byte, len(m.PropertyKeys)*10)
		var j4 int
		for _, num := range m.PropertyKeys {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpec(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	if len(m.PropertyValues) > 0 {
		for _, s := range m.PropertyValues {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.CreatedAtNs != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.CreatedAtNs))
	}
	if m.EventType != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.EventType))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.Offset))
	}
	if m.Partition != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.Partition))
	}
	if len(m.ForeignId) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.ForeignId)))
		i += copy(dAtA[i:], m.ForeignId)
	}
	if m.ForeignType != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.ForeignType))
	}
	if m.Payload != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.Payload))
	}
	return i, nil
}

func (m *PersistedContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersistedContext) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PropertyKeys) > 0 {
		dAtA7 := make([]byte, len(m.PropertyKeys)*10)
		var j6 int
		for _, num := range m.PropertyKeys {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpec(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if len(m.PropertyValues) > 0 {
		for _, s := range m.PropertyValues {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.CreatedAtNs != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.CreatedAtNs))
	}
	if len(m.ForeignId) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.ForeignId)))
		i += copy(dAtA[i:], m.ForeignId)
	}
	if m.ForeignType != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.ForeignType))
	}
	return i, nil
}

func encodeVarintSpec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *KV) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Context != 0 {
		n += 1 + sovSpec(uint64(m.Context))
	}
	return n
}

func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if len(m.Properties) > 0 {
		for _, e := range m.Properties {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if m.CreatedAtNs != 0 {
		n += 1 + sovSpec(uint64(m.CreatedAtNs))
	}
	l = len(m.EventType)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.ForeignId)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.ForeignType)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *Context) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Properties) > 0 {
		for _, e := range m.Properties {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if m.CreatedAtNs != 0 {
		n += 1 + sovSpec(uint64(m.CreatedAtNs))
	}
	l = len(m.ForeignId)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.ForeignType)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *Envelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *PersistedMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TagKeys) > 0 {
		l = 0
		for _, e := range m.TagKeys {
			l += sovSpec(uint64(e))
		}
		n += 1 + sovSpec(uint64(l)) + l
	}
	if len(m.TagValues) > 0 {
		for _, s := range m.TagValues {
			l = len(s)
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if len(m.PropertyKeys) > 0 {
		l = 0
		for _, e := range m.PropertyKeys {
			l += sovSpec(uint64(e))
		}
		n += 1 + sovSpec(uint64(l)) + l
	}
	if len(m.PropertyValues) > 0 {
		for _, s := range m.PropertyValues {
			l = len(s)
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if m.CreatedAtNs != 0 {
		n += 1 + sovSpec(uint64(m.CreatedAtNs))
	}
	if m.EventType != 0 {
		n += 1 + sovSpec(uint64(m.EventType))
	}
	if m.Offset != 0 {
		n += 1 + sovSpec(uint64(m.Offset))
	}
	if m.Partition != 0 {
		n += 1 + sovSpec(uint64(m.Partition))
	}
	l = len(m.ForeignId)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.ForeignType != 0 {
		n += 1 + sovSpec(uint64(m.ForeignType))
	}
	if m.Payload != 0 {
		n += 1 + sovSpec(uint64(m.Payload))
	}
	return n
}

func (m *PersistedContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PropertyKeys) > 0 {
		l = 0
		for _, e := range m.PropertyKeys {
			l += sovSpec(uint64(e))
		}
		n += 1 + sovSpec(uint64(l)) + l
	}
	if len(m.PropertyValues) > 0 {
		for _, s := range m.PropertyValues {
			l = len(s)
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if m.CreatedAtNs != 0 {
		n += 1 + sovSpec(uint64(m.CreatedAtNs))
	}
	l = len(m.ForeignId)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.ForeignType != 0 {
		n += 1 + sovSpec(uint64(m.ForeignType))
	}
	return n
}

func sovSpec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSpec(x uint64) (n int) {
	return sovSpec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KV) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KV: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KV: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &KV{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = append(m.Properties, &KV{})
			if err := m.Properties[len(m.Properties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtNs", wireType)
			}
			m.CreatedAtNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtNs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Context) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Context: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Context: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = append(m.Properties, &KV{})
			if err := m.Properties[len(m.Properties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtNs", wireType)
			}
			m.CreatedAtNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtNs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Envelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Envelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Envelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersistedMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersistedMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersistedMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TagKeys = append(m.TagKeys, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSpec
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TagKeys) == 0 {
					m.TagKeys = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TagKeys = append(m.TagKeys, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TagKeys", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagValues = append(m.TagValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PropertyKeys = append(m.PropertyKeys, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSpec
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PropertyKeys) == 0 {
					m.PropertyKeys = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PropertyKeys = append(m.PropertyKeys, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PropertyKeys", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropertyValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropertyValues = append(m.PropertyValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtNs", wireType)
			}
			m.CreatedAtNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtNs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			m.Partition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Partition |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignType", wireType)
			}
			m.ForeignType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignType |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			m.Payload = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Payload |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersistedContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersistedContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersistedContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PropertyKeys = append(m.PropertyKeys, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSpec
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PropertyKeys) == 0 {
					m.PropertyKeys = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PropertyKeys = append(m.PropertyKeys, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PropertyKeys", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropertyValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropertyValues = append(m.PropertyValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtNs", wireType)
			}
			m.CreatedAtNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtNs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignType", wireType)
			}
			m.ForeignType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignType |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSpec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSpec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSpec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpec   = fmt.Errorf("proto: integer overflow")
)
